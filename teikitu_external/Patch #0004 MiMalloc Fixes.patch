From 0b835369fc6c2eca07e4484199da2062138a5972 Mon Sep 17 00:00:00 2001
From: Andrew Aye <github.very069@passmail.net>
Date: Mon, 18 Nov 2024 23:14:07 -0800
Subject: [PATCH] Removal of Redirector code path.

---
 CMakeLists.txt              |   2 +-
 include/mimalloc.h          |   3 +
 include/mimalloc/internal.h |   2 -
 src/init.c                  |  11 +--
 src/prim/prim.c             |  35 -------
 src/prim/windows/prim.c     | 192 +-----------------------------------
 6 files changed, 11 insertions(+), 234 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8455b431..50eb8c0b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -426,7 +426,7 @@ set(mi_install_bindir       "${CMAKE_INSTALL_BINDIR}")
 # static libraries and object files, includes, and cmake config files
 # are either installed at top level, or use versioned directories for side-by-side installation (default)
 if (MI_INSTALL_TOPLEVEL)
-  set(mi_install_objdir     "${CMAKE_INSTALL_LIBDIR}/${CMAKE_BUILD_TYPE}")
+  set(mi_install_objdir     "${CMAKE_INSTALL_LIBDIR}")
   set(mi_install_incdir     "${CMAKE_INSTALL_INCLUDEDIR}")
   set(mi_install_cmakedir   "${CMAKE_INSTALL_LIBDIR}/cmake/mimalloc")
 else()
diff --git a/include/mimalloc.h b/include/mimalloc.h
index 1e55c4bf..29e034cd 100644
--- a/include/mimalloc.h
+++ b/include/mimalloc.h
@@ -437,6 +437,9 @@ mi_decl_nodiscard mi_decl_export void* mi_new_reallocn(void* p, size_t newcount,
 mi_decl_nodiscard mi_decl_export mi_decl_restrict void* mi_heap_alloc_new(mi_heap_t* heap, size_t size)                mi_attr_malloc mi_attr_alloc_size(2);
 mi_decl_nodiscard mi_decl_export mi_decl_restrict void* mi_heap_alloc_new_n(mi_heap_t* heap, size_t count, size_t size) mi_attr_malloc mi_attr_alloc_size2(2, 3);
 
+mi_decl_export void mi_process_load(void);
+mi_decl_export void mi_cdecl mi_process_done(void);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/include/mimalloc/internal.h b/include/mimalloc/internal.h
index 82e8c766..44053c4f 100644
--- a/include/mimalloc/internal.h
+++ b/include/mimalloc/internal.h
@@ -77,8 +77,6 @@ static inline uintptr_t _mi_random_shuffle(uintptr_t x);
 // init.c
 extern mi_decl_cache_align mi_stats_t       _mi_stats_main;
 extern mi_decl_cache_align const mi_page_t  _mi_page_empty;
-void       _mi_process_load(void);
-void mi_cdecl _mi_process_done(void);
 bool       _mi_is_redirected(void);
 bool       _mi_allocator_init(const char** message);
 void       _mi_allocator_done(void);
diff --git a/src/init.c b/src/init.c
index 75458a1f..47da621d 100644
--- a/src/init.c
+++ b/src/init.c
@@ -516,7 +516,7 @@ bool mi_decl_noinline _mi_preloading(void) {
 }
 
 // Called once by the process loader from `src/prim/prim.c`
-void _mi_process_load(void) {
+void mi_process_load(void) {
   mi_heap_main_init();
   #if defined(__APPLE__) || defined(MI_TLS_RECURSE_GUARD)
   volatile mi_heap_t* dummy = _mi_heap_default; // access TLS to allocate it before setting tls_initialized to true;
@@ -529,13 +529,6 @@ void _mi_process_load(void) {
   mi_process_init();
   if (_mi_is_redirected()) _mi_verbose_message("malloc is redirected.\n");
 
-  // show message from the redirector (if present)
-  const char* msg = NULL;
-  _mi_allocator_init(&msg);
-  if (msg != NULL && (mi_option_is_enabled(mi_option_verbose) || mi_option_is_enabled(mi_option_show_errors))) {
-    _mi_fputs(NULL,NULL,NULL,msg);
-  }
-
   // reseed random
   _mi_random_reinit_if_weak(&_mi_heap_main.random);
 }
@@ -609,7 +602,7 @@ void mi_process_init(void) mi_attr_noexcept {
 }
 
 // Called when the process is done (through `at_exit`)
-void mi_cdecl _mi_process_done(void) {
+void mi_cdecl mi_process_done(void) {
   // only shutdown if we were initialized
   if (!_mi_process_is_initialized) return;
   // ensure we are called once
diff --git a/src/prim/prim.c b/src/prim/prim.c
index 2002853f..cdc60f76 100644
--- a/src/prim/prim.c
+++ b/src/prim/prim.c
@@ -26,41 +26,6 @@ terms of the MIT license. A copy of the license can be found in the file
 
 #endif
 
-// Generic process initialization
-#ifndef MI_PRIM_HAS_PROCESS_ATTACH
-#if defined(__GNUC__) || defined(__clang__)
-  // gcc,clang: use the constructor/destructor attribute
-  // which for both seem to run before regular constructors/destructors
-  #if defined(__clang__)
-    #define mi_attr_constructor __attribute__((constructor(101)))
-    #define mi_attr_destructor  __attribute__((destructor(101)))
-  #else
-    #define mi_attr_constructor __attribute__((constructor))
-    #define mi_attr_destructor  __attribute__((destructor))
-  #endif
-  static void mi_attr_constructor mi_process_attach(void) {
-    _mi_process_load();
-  }
-  static void mi_attr_destructor mi_process_detach(void) {
-    _mi_process_done();
-  }
-#elif defined(__cplusplus)
-  // C++: use static initialization to detect process start/end
-  // This is not guaranteed to be first/last but the best we can generally do?
-  struct mi_init_done_t {
-    mi_init_done_t() {
-      _mi_process_load();
-    }
-    ~mi_init_done_t() {
-      _mi_process_done();
-    }
-  };
-  static mi_init_done_t mi_init_done;
- #else
-  #pragma message("define a way to call _mi_process_load/done on your platform")
-#endif
-#endif
-
 // Generic allocator init/done callback 
 #ifndef MI_PRIM_HAS_ALLOCATOR_INIT
 bool _mi_is_redirected(void) {
diff --git a/src/prim/windows/prim.c b/src/prim/windows/prim.c
index 385354fc..edc2b226 100644
--- a/src/prim/windows/prim.c
+++ b/src/prim/windows/prim.c
@@ -601,195 +601,13 @@ bool _mi_prim_random_buf(void* buf, size_t buf_len) {
 
 #endif  // MI_USE_RTLGENRANDOM
 
-
-
 //----------------------------------------------------------------
 // Process & Thread Init/Done
 //----------------------------------------------------------------
 
-static void NTAPI mi_win_main(PVOID module, DWORD reason, LPVOID reserved) {
-  MI_UNUSED(reserved);
-  MI_UNUSED(module);
-  if (reason==DLL_PROCESS_ATTACH) {
-    _mi_process_load();
-  }
-  else if (reason==DLL_PROCESS_DETACH) {
-    _mi_process_done();
-  }
-  else if (reason==DLL_THREAD_DETACH && !_mi_is_redirected()) {
-    _mi_thread_done(NULL); 
-  }  
+// nothing to do since `_mi_thread_done` is handled through the DLL_THREAD_DETACH event.
+void _mi_prim_thread_init_auto_done(void) { }
+void _mi_prim_thread_done_auto_done(void) { }
+void _mi_prim_thread_associate_default_heap(mi_heap_t* heap) {
+  MI_UNUSED(heap);
 }
-
-
-#if defined(MI_SHARED_LIB)
-  #define MI_PRIM_HAS_PROCESS_ATTACH  1
-
-  // Windows DLL: easy to hook into process_init and thread_done
-  __declspec(dllexport) BOOL WINAPI DllMain(HINSTANCE inst, DWORD reason, LPVOID reserved) {
-    mi_win_main((PVOID)inst,reason,reserved);
-    return TRUE;
-  }
-
-  // nothing to do since `_mi_thread_done` is handled through the DLL_THREAD_DETACH event.
-  void _mi_prim_thread_init_auto_done(void) { }
-  void _mi_prim_thread_done_auto_done(void) { }
-  void _mi_prim_thread_associate_default_heap(mi_heap_t* heap) {
-    MI_UNUSED(heap);
-  }
-
-#elif !defined(MI_WIN_USE_FLS)
-  #define MI_PRIM_HAS_PROCESS_ATTACH  1
-
-  static void NTAPI mi_win_main_attach(PVOID module, DWORD reason, LPVOID reserved) {
-    if (reason == DLL_PROCESS_ATTACH || reason == DLL_THREAD_ATTACH) {
-      mi_win_main(module, reason, reserved);
-    }
-  }
-  static void NTAPI mi_win_main_detach(PVOID module, DWORD reason, LPVOID reserved) {
-    if (reason == DLL_PROCESS_DETACH || reason == DLL_THREAD_DETACH) {
-      mi_win_main(module, reason, reserved);
-    }
-  }
-
-  // Set up TLS callbacks in a statically linked library by using special data sections.
-  // See <https://stackoverflow.com/questions/14538159/tls-callback-in-windows>
-  // We use 2 entries to ensure we call attach events before constructors
-  // are called, and detach events after destructors are called.
-  #if defined(__cplusplus)
-  extern "C" {
-  #endif
-
-  #if defined(_WIN64)
-    #pragma comment(linker, "/INCLUDE:_tls_used")
-    #pragma comment(linker, "/INCLUDE:_mi_tls_callback_pre")
-    #pragma comment(linker, "/INCLUDE:_mi_tls_callback_post")
-    #pragma const_seg(".CRT$XLB")
-    extern const PIMAGE_TLS_CALLBACK _mi_tls_callback_pre[];
-    const PIMAGE_TLS_CALLBACK _mi_tls_callback_pre[] = { &mi_win_main_attach };
-    #pragma const_seg()
-    #pragma const_seg(".CRT$XLY")
-    extern const PIMAGE_TLS_CALLBACK _mi_tls_callback_post[];
-    const PIMAGE_TLS_CALLBACK _mi_tls_callback_post[] = { &mi_win_main_detach };
-    #pragma const_seg()
-  #else
-    #pragma comment(linker, "/INCLUDE:__tls_used")
-    #pragma comment(linker, "/INCLUDE:__mi_tls_callback_pre")
-    #pragma comment(linker, "/INCLUDE:__mi_tls_callback_post")
-    #pragma data_seg(".CRT$XLB")
-    PIMAGE_TLS_CALLBACK _mi_tls_callback_pre[] = { &mi_win_main_attach };
-    #pragma data_seg()
-    #pragma data_seg(".CRT$XLY")
-    PIMAGE_TLS_CALLBACK _mi_tls_callback_post[] = { &mi_win_main_detach };
-    #pragma data_seg()    
-  #endif
-
-  #if defined(__cplusplus)
-  }
-  #endif
-
-  // nothing to do since `_mi_thread_done` is handled through the DLL_THREAD_DETACH event.
-  void _mi_prim_thread_init_auto_done(void) { }
-  void _mi_prim_thread_done_auto_done(void) { }
-  void _mi_prim_thread_associate_default_heap(mi_heap_t* heap) {
-    MI_UNUSED(heap);
-  }
-
-#else // deprecated: statically linked, use fiber api 
-
-  #if defined(_MSC_VER) // on clang/gcc use the constructor attribute (in `src/prim/prim.c`)
-    // MSVC: use data section magic for static libraries
-    // See <https://www.codeguru.com/cpp/misc/misc/applicationcontrol/article.php/c6945/Running-Code-Before-and-After-Main.htm>
-    #define MI_PRIM_HAS_PROCESS_ATTACH 1
-    
-    static int mi_process_attach(void) {
-      mi_win_main(NULL,DLL_PROCESS_ATTACH,NULL);
-      atexit(&_mi_process_done);
-      return 0;
-    }
-    typedef int(*mi_crt_callback_t)(void);
-    #if defined(_WIN64)
-      #pragma comment(linker, "/INCLUDE:_mi_tls_callback")
-      #pragma section(".CRT$XIU", long, read)
-    #else
-      #pragma comment(linker, "/INCLUDE:__mi_tls_callback")
-    #endif
-    #pragma data_seg(".CRT$XIU")
-    mi_decl_externc mi_crt_callback_t _mi_tls_callback[] = { &mi_process_attach };
-    #pragma data_seg()
-  #endif
-
-  // use the fiber api for calling `_mi_thread_done`.
-  #include <fibersapi.h>
-  #if (_WIN32_WINNT < 0x600)  // before Windows Vista
-  WINBASEAPI DWORD WINAPI FlsAlloc( _In_opt_ PFLS_CALLBACK_FUNCTION lpCallback );
-  WINBASEAPI PVOID WINAPI FlsGetValue( _In_ DWORD dwFlsIndex );
-  WINBASEAPI BOOL  WINAPI FlsSetValue( _In_ DWORD dwFlsIndex, _In_opt_ PVOID lpFlsData );
-  WINBASEAPI BOOL  WINAPI FlsFree(_In_ DWORD dwFlsIndex);
-  #endif
-
-  static DWORD mi_fls_key = (DWORD)(-1);
-
-  static void NTAPI mi_fls_done(PVOID value) {
-    mi_heap_t* heap = (mi_heap_t*)value;
-    if (heap != NULL) {
-      _mi_thread_done(heap);
-      FlsSetValue(mi_fls_key, NULL);  // prevent recursion as _mi_thread_done may set it back to the main heap, issue #672
-    }
-  }
-
-  void _mi_prim_thread_init_auto_done(void) {
-    mi_fls_key = FlsAlloc(&mi_fls_done);
-  }
-
-  void _mi_prim_thread_done_auto_done(void) {
-    // call thread-done on all threads (except the main thread) to prevent
-    // dangling callback pointer if statically linked with a DLL; Issue #208
-    FlsFree(mi_fls_key);
-  }
-
-  void _mi_prim_thread_associate_default_heap(mi_heap_t* heap) {
-    mi_assert_internal(mi_fls_key != (DWORD)(-1));
-    FlsSetValue(mi_fls_key, heap);
-  }
-#endif
-
-// ---------------------------------------------------- 
-// Communicate with the redirection module on Windows
-// ---------------------------------------------------- 
-#if defined(MI_SHARED_LIB) && !defined(MI_WIN_NOREDIRECT)
-  #define MI_PRIM_HAS_ALLOCATOR_INIT 1
-
-  static bool mi_redirected = false;   // true if malloc redirects to mi_malloc
-
-  bool _mi_is_redirected(void) {
-    return mi_redirected;
-  }
-
-  #ifdef __cplusplus
-  extern "C" {
-  #endif
-  mi_decl_export void _mi_redirect_entry(DWORD reason) {
-    // called on redirection; careful as this may be called before DllMain
-    if (reason == DLL_PROCESS_ATTACH) {
-      mi_redirected = true;
-    }
-    else if (reason == DLL_PROCESS_DETACH) {
-      mi_redirected = false;
-    }
-    else if (reason == DLL_THREAD_DETACH) {
-      _mi_thread_done(NULL);
-    }
-  }
-  __declspec(dllimport) bool mi_cdecl mi_allocator_init(const char** message);
-  __declspec(dllimport) void mi_cdecl mi_allocator_done(void);
-  #ifdef __cplusplus
-  }
-  #endif
-  bool _mi_allocator_init(const char** message) {
-    return mi_allocator_init(message);
-  }
-  void _mi_allocator_done(void) {
-    mi_allocator_done();
-  }
-#endif
\ No newline at end of file
-- 
2.46.2.windows.1

