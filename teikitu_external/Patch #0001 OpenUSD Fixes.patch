From 4ff89e3f775b28929aee1185d2fd86d132ba9832 Mon Sep 17 00:00:00 2001
From: Andrew Aye <github.very069@passmail.net>
Date: Fri, 13 Dec 2024 23:14:45 -0800
Subject: [PATCH] Teikitu Compile Patch

---
 cmake/defaults/CXXDefaults.cmake              |  4 ++
 cmake/defaults/clangdefaults.cmake            |  4 ++
 cmake/defaults/msvcdefaults.cmake             | 28 +++++++-
 cmake/defaults/windefaults.cmake              | 62 ++++++++++++++++++
 cmake/macros/Private.cmake                    |  6 +-
 cmake/macros/Public.cmake                     | 15 +++--
 pxr/base/arch/attributes.cpp                  |  1 +
 pxr/base/arch/attributes.h                    |  2 +
 pxr/base/arch/defines.h                       |  2 +-
 pxr/base/arch/demangle.cpp                    |  4 +-
 pxr/base/arch/env.cpp                         |  2 +-
 pxr/base/arch/errno.cpp                       |  4 +-
 pxr/base/arch/fileSystem.cpp                  |  1 +
 pxr/base/arch/fileSystem.h                    |  4 ++
 pxr/base/arch/library.cpp                     |  4 ++
 pxr/base/arch/pragmas.h                       | 64 +++++++++++++++++++
 pxr/base/arch/stackTrace.cpp                  |  4 +-
 pxr/base/arch/symbols.cpp                     |  2 +-
 pxr/base/arch/testenv/testArchPRead.cpp       |  5 +-
 pxr/base/arch/testenv/testArchUtil.cpp        |  6 +-
 pxr/base/gf/numericCast.h                     |  5 ++
 pxr/base/plug/CMakeLists.txt                  | 15 +++--
 pxr/base/tf/fileUtils.cpp                     |  2 +-
 pxr/base/tf/mallocTag.cpp                     |  6 +-
 pxr/base/tf/pyClassMethod.h                   |  2 +-
 pxr/base/tf/pyExceptionState.h                |  1 +
 pxr/base/tf/pyPtrHelpers.h                    |  4 +-
 pxr/base/tf/singleton.h                       |  4 +-
 pxr/base/tf/stringUtils.cpp                   | 10 ++-
 pxr/base/tf/testenv/delegatedCountPtr.cpp     |  3 +
 pxr/base/tf/testenv/hash.cpp                  |  4 +-
 pxr/base/tf/testenv/scopeDescription.cpp      |  1 +
 pxr/base/tf/wrapTestPyStaticTokens.cpp        |  2 +-
 pxr/base/tf/wrapTypeHelpers.h                 |  2 +-
 pxr/base/trace/wrapCollector.cpp              |  2 +-
 pxr/base/ts/regressionPreventer.h             |  2 +-
 pxr/base/vt/array.h                           |  4 +-
 pxr/base/vt/wrapArrayDualQuaternion.cpp       | 11 ++++
 pxr/base/vt/wrapArrayFloat.cpp                | 11 ++++
 pxr/base/vt/wrapArrayIntegral.cpp             | 17 +++++
 pxr/base/vt/wrapArrayMatrix.cpp               | 14 ++++
 pxr/base/vt/wrapArrayQuaternion.cpp           | 12 ++++
 pxr/base/vt/wrapArrayRange.cpp                | 16 +++++
 pxr/base/vt/wrapArrayString.cpp               |  9 +++
 pxr/base/vt/wrapArrayToken.cpp                |  9 +++
 pxr/base/vt/wrapArrayVec.cpp                  | 20 ++++++
 pxr/external/boost/python/object_core.hpp     |  4 +-
 .../boost/python/src/object/function.cpp      |  8 +++
 .../boost/python/test/polymorphism2.cpp       |  2 +-
 pxr/imaging/hd/perfLog.cpp                    |  4 +-
 pxr/imaging/hd/sortedIds.h                    |  2 +-
 .../hd/testenv/testHdSortedIdsPerf.cpp        |  8 +--
 pxr/imaging/hdSt/bufferArrayRegistry.cpp      |  5 +-
 pxr/imaging/hdSt/codeGen.cpp                  |  6 +-
 pxr/imaging/hdSt/commandBuffer.cpp            |  2 +-
 pxr/imaging/hdSt/interleavedMemoryManager.cpp |  2 +-
 pxr/imaging/hdSt/primUtils.cpp                |  2 +-
 pxr/imaging/hdSt/renderDelegate.cpp           |  3 +
 .../hdSt/testenv/testHdStDisplayStyle.cpp     |  2 +-
 .../testenv/testHdStDrawItemIntegrity.cpp     |  2 +-
 .../hdSt/testenv/testHdStDrawItemsCache.cpp   |  8 +--
 .../hdSt/testenv/testHdStDynamicUvTexture.cpp |  2 +-
 .../hdSt/testenv/testHdStInstancing.cpp       |  2 +-
 .../testHdStMultipleFvarTopologies.cpp        |  3 +-
 pxr/imaging/hdSt/vboMemoryManager.cpp         |  4 +-
 pxr/imaging/hdSt/vboSimpleMemoryManager.cpp   |  2 +-
 pxr/imaging/hdx/selectionTracker.cpp          |  2 +-
 pxr/imaging/hgiGL/scopedStateHolder.h         |  1 -
 pxr/imaging/hio/OpenEXR/OpenEXRCore/chunk.c   |  2 +-
 .../OpenEXR/deflate/lib/deflate_decompress.c  |  6 +-
 pxr/imaging/hio/OpenEXR/openexr-c.c           |  8 +++
 pxr/imaging/hio/fieldTextureData.h            |  2 +-
 pxr/imaging/hio/image.h                       |  2 +-
 pxr/imaging/hio/stb/stb_image.h               |  2 +-
 pxr/usd/sdf/childrenProxy.h                   |  7 --
 pxr/usd/sdf/predicateExpression.cpp           |  3 +
 pxr/usd/sdf/textFileFormat.cpp                |  2 +-
 pxr/usd/sdf/wrapArrayAssetPath.cpp            |  9 +++
 pxr/usd/usd/crateFile.cpp                     |  5 +-
 pxr/usd/usd/prim.h                            |  2 +-
 pxr/usd/usd/primDefinition.cpp                |  4 +-
 pxr/usd/usd/stage.cpp                         |  2 +-
 pxr/usd/usd/testenv/testUsdResolveTarget.cpp  |  4 +-
 pxr/usd/usdGeom/primvar.h                     |  4 +-
 pxr/usd/usdGeom/subset.cpp                    | 12 ++--
 pxr/usd/usdUtils/assetLocalizationDelegate.h  |  2 +-
 .../usdImaging/cylinderLightAdapter.h         |  4 +-
 .../usdImaging/dataSourceMaterial.cpp         |  4 +-
 pxr/usdImaging/usdImaging/dataSourcePrim.cpp  |  6 +-
 pxr/usdImaging/usdImaging/dataSourcePrim.h    |  2 -
 .../usdImaging/dataSourceRelationship.cpp     |  1 -
 .../usdImaging/dataSourceRelationship.h       |  1 -
 .../usdImaging/dataSourceRenderPrims.cpp      |  4 +-
 .../usdImaging/dataSourceVolume.cpp           |  3 +-
 pxr/usdImaging/usdImaging/dataSourceVolume.h  |  1 -
 pxr/usdImaging/usdImaging/delegate.cpp        |  2 +-
 pxr/usdImaging/usdImaging/drawModeStandin.cpp |  1 +
 ...DirectMaterialBindingsDataSourceProvider.h |  6 +-
 pxr/usdImaging/usdImaging/gprimAdapter.cpp    |  8 +--
 pxr/usdImaging/usdImaging/indexProxy.cpp      |  3 +
 pxr/usdImaging/usdImaging/instanceAdapter.cpp |  3 +
 .../usdImaging/pointInstancerAdapter.cpp      |  2 +-
 .../usdImaging/portalLightAdapter.h           |  4 +-
 .../testenv/testUsdImagingDelegate.cpp        |  8 +--
 ...stUsdImagingNestedInstancingCategories.cpp |  6 +-
 pxr/usdImaging/usdImaging/tetMeshAdapter.h    |  2 +-
 .../usdVolImaging/field3dAssetAdapter.h       |  2 +-
 .../usdVolImaging/openvdbAssetAdapter.h       |  2 +-
 108 files changed, 495 insertions(+), 146 deletions(-)
 create mode 100644 cmake/defaults/windefaults.cmake

diff --git a/cmake/defaults/CXXDefaults.cmake b/cmake/defaults/CXXDefaults.cmake
index 8218d50c..9202dd52 100644
--- a/cmake/defaults/CXXDefaults.cmake
+++ b/cmake/defaults/CXXDefaults.cmake
@@ -21,6 +21,10 @@ elseif(MSVC)
     include(msvcdefaults)
 endif()
 
+if(WIN32)
+    include(windefaults)
+endif()
+
 _add_define(GL_GLEXT_PROTOTYPES)
 _add_define(GLX_GLXEXT_PROTOTYPES)
 
diff --git a/cmake/defaults/clangdefaults.cmake b/cmake/defaults/clangdefaults.cmake
index 326c15f6..bfc6fb4d 100644
--- a/cmake/defaults/clangdefaults.cmake
+++ b/cmake/defaults/clangdefaults.cmake
@@ -19,3 +19,7 @@ endif()
 if(CMAKE_USE_PTHREADS_INIT)
     _disable_warning("unused-command-line-argument")
 endif()
+
+_disable_warning("unused-but-set-variable")
+
+set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} -Werror")
diff --git a/cmake/defaults/msvcdefaults.cmake b/cmake/defaults/msvcdefaults.cmake
index 13d77d0a..96a6554d 100644
--- a/cmake/defaults/msvcdefaults.cmake
+++ b/cmake/defaults/msvcdefaults.cmake
@@ -8,8 +8,30 @@
 # Enable exception handling.
 set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /EHsc")
 
-# Standards compliant.
-set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zc:rvalueCast /Zc:strictStrings")
+# Standards conformance: This option disables permissive behaviors, and sets
+# the /Zc compiler options for strict conformance
+set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /permissive-")
+
+# Standards conformance: Enforce Standard C++ explicit type conversion rules.
+# Enabled automatically by permissive-
+# set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zc:rvalueCast")
+
+# Standards conformance: Disable string-literal to char* or wchar_t* conversion.
+# Enabled automatically by permissive-
+# set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zc:strictStrings")
+
+# Standards conformance: Standard compliant preprocessor
+set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zc:preprocessor")
+
+# Standards conformance: MSVC stores the C++ standard version in _MSVC_LANG and
+# __cplusplus was stuck on an early standard version. This will force
+# __cplusplus == _MSVC_LANG which conforms to the standard.
+set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zc:__cplusplus")
+
+# Standards conformance: This causes the class-level dllexport and dllimport
+# attributes to not apply to inline member functions, as they otherwise would.
+# Only available with Clang-CL
+# set(_PXR_CXX_FLAGS "${_PXR_CXX_FLAGS} /Zc:dllexportInlines-")
 
 # The /Zc:inline option strips out the "arch_ctor_<name>" symbols used for
 # library initialization by ARCH_CONSTRUCTOR starting in Visual Studio 2019, 
@@ -76,6 +98,8 @@ _disable_warning("4180")
 # tbb/enumerable_thread_specific.h
 _disable_warning("4334")
 
+_disable_warning("4756")
+
 # Disable warning C4996 regarding fopen(), strcpy(), etc.
 _add_define("_CRT_SECURE_NO_WARNINGS")
 
diff --git a/cmake/defaults/windefaults.cmake b/cmake/defaults/windefaults.cmake
new file mode 100644
index 00000000..0de3da6b
--- /dev/null
+++ b/cmake/defaults/windefaults.cmake
@@ -0,0 +1,62 @@
+#
+# Copyright 2016 Pixar
+#
+# Licensed under the Apache License, Version 2.0 (the "Apache License")
+# with the following modification; you may not use this file except in
+# compliance with the Apache License and the following modification to it:
+# Section 6. Trademarks. is deleted and replaced with:
+#
+# 6. Trademarks. This License does not grant permission to use the trade
+#    names, trademarks, service marks, or product names of the Licensor
+#    and its affiliates, except as required to comply with Section 4(c) of
+#    the License and to reproduce the content of the NOTICE file.
+#
+# You may obtain a copy of the Apache License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the Apache License with the above modification is
+# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied. See the Apache License for the specific
+# language governing permissions and limitations under the Apache License.
+#
+
+# Disable warning C4996 regarding fopen(), strcpy(), etc.
+_add_define("_CRT_SECURE_NO_WARNINGS")
+
+# Disable warning C4996 regarding unchecked iterators for std::transform,
+# std::copy, std::equal, et al.
+_add_define("_SCL_SECURE_NO_WARNINGS")
+
+# Make sure WinDef.h does not define min and max macros which
+# will conflict with std::min() and std::max().
+_add_define("NOMINMAX")
+
+# Needed to prevent YY files trying to include unistd.h
+# (which doesn't exist on Windows)
+_add_define("YY_NO_UNISTD_H")
+
+# Forces all libraries that have separate source to be linked as
+# DLL's rather than static libraries on Microsoft Windows, unless
+# explicitly told otherwise.
+if (NOT Boost_USE_STATIC_LIBS)
+    _add_define("BOOST_ALL_DYN_LINK")
+endif()
+
+# Suppress automatic boost linking via pragmas, as we must not rely on
+# a heuristic, but upon the tool set we have specified in our build.
+_add_define("BOOST_ALL_NO_LIB")
+
+if(${PXR_USE_DEBUG_PYTHON})
+    _add_define("BOOST_DEBUG_PYTHON")
+    _add_define("BOOST_LINKING_PYTHON")
+endif()
+
+# Need half::_toFloat and half::_eLut.
+_add_define("OPENEXR_DLL")
+
+# Exclude headers from unnecessary Windows APIs to improve build
+# times and avoid annoying conflicts with macros defined in those
+# headers.
+_add_define("WIN32_LEAN_AND_MEAN")
diff --git a/cmake/macros/Private.cmake b/cmake/macros/Private.cmake
index 311524da..839e06a5 100644
--- a/cmake/macros/Private.cmake
+++ b/cmake/macros/Private.cmake
@@ -945,7 +945,11 @@ function(_pxr_target_link_libraries NAME)
                 elseif(CMAKE_COMPILER_IS_GNUCXX)
                     list(APPEND final -Wl,--whole-archive ${lib} -Wl,--no-whole-archive)
                 elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
-                    list(APPEND final -Wl,-force_load ${lib})
+                    if (WIN32) #lld-link does not have a consistent set of arguments
+                        list(APPEND final -Wl,-wholearchive:$<TARGET_FILE:${lib}>)
+                    else()
+                        list(APPEND final -Wl,-force_load ${lib})
+                    endif()
                 else()
                     # Unknown platform.
                     list(APPEND final ${lib})
diff --git a/cmake/macros/Public.cmake b/cmake/macros/Public.cmake
index 1b809e73..19ebc275 100644
--- a/cmake/macros/Public.cmake
+++ b/cmake/macros/Public.cmake
@@ -1126,10 +1126,17 @@ function(pxr_toplevel_epilogue)
                     -Wl,--whole-archive $<BUILD_INTERFACE:$<TARGET_FILE:usd_m>> -Wl,--no-whole-archive
             )
         elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
-            target_link_libraries(usd_ms
-                PRIVATE
-                    -Wl,-force_load $<BUILD_INTERFACE:$<TARGET_FILE:usd_m>>
-            )
+            if (WIN32) #lld-link does not have a consistent set of arguments
+                target_link_libraries(usd_ms
+                    PRIVATE
+                        -Wl,-wholearchive $<BUILD_INTERFACE:$<TARGET_FILE:usd_m>>
+                )
+            else()
+                target_link_libraries(usd_ms
+                    PRIVATE
+                        -Wl,-force_load $<BUILD_INTERFACE:$<TARGET_FILE:usd_m>>
+                )
+            endif()
         endif()
 
         # Since we didn't add a dependency to usd_ms on usd_m above, we
diff --git a/pxr/base/arch/attributes.cpp b/pxr/base/arch/attributes.cpp
index 1309d6f2..3dd4fa82 100644
--- a/pxr/base/arch/attributes.cpp
+++ b/pxr/base/arch/attributes.cpp
@@ -254,6 +254,7 @@ static void InstallDyldCallbacks()
 
 PXR_NAMESPACE_CLOSE_SCOPE
 
+#elif defined(ARCH_COMPILER_GCC) || defined(ARCH_COMPILER_CLANG)
 #elif defined(ARCH_OS_WINDOWS)
 
 #include <Windows.h>
diff --git a/pxr/base/arch/attributes.h b/pxr/base/arch/attributes.h
index 1d2820d1..79edcded 100644
--- a/pxr/base/arch/attributes.h
+++ b/pxr/base/arch/attributes.h
@@ -158,6 +158,7 @@ PXR_NAMESPACE_OPEN_SCOPE
         __attribute__((format(printf, _fmt, _firstArg)))
 #   define ARCH_SCANF_FUNCTION(_fmt, _firstArg)	\
         __attribute__((format(scanf, _fmt, _firstArg)))
+#   define ARCH_FORCEINLINE __attribute__((always_inline))
 #   define ARCH_NOINLINE __attribute__((noinline))
 #   define ARCH_UNUSED_ARG   __attribute__ ((unused))
 #   define ARCH_UNUSED_FUNCTION __attribute__((unused))
@@ -168,6 +169,7 @@ PXR_NAMESPACE_OPEN_SCOPE
 
 #   define ARCH_PRINTF_FUNCTION(_fmt, _firstArg)
 #   define ARCH_SCANF_FUNCTION(_fmt, _firstArg)
+#   define ARCH_FORCEINLINE __forceinline
 #   define ARCH_NOINLINE // __declspec(noinline)
 #   define ARCH_UNUSED_ARG
 #   define ARCH_UNUSED_FUNCTION
diff --git a/pxr/base/arch/defines.h b/pxr/base/arch/defines.h
index 021dd28c..200d3999 100644
--- a/pxr/base/arch/defines.h
+++ b/pxr/base/arch/defines.h
@@ -81,7 +81,7 @@
 
 // The current version of Apple clang does not support the thread_local
 // keyword.
-#if !(defined(ARCH_OS_DARWIN) && defined(ARCH_COMPILER_CLANG))
+#if !(defined(ARCH_OS_DARWIN) && defined(__apple_build_version__))
 #define ARCH_HAS_THREAD_LOCAL
 #endif
 
diff --git a/pxr/base/arch/demangle.cpp b/pxr/base/arch/demangle.cpp
index 683fcf2a..4e6ecce7 100644
--- a/pxr/base/arch/demangle.cpp
+++ b/pxr/base/arch/demangle.cpp
@@ -16,8 +16,8 @@
 
 using std::string;
 
-#if (ARCH_COMPILER_GCC_MAJOR == 3 && ARCH_COMPILER_GCC_MINOR >= 1) || \
-    ARCH_COMPILER_GCC_MAJOR > 3 || defined(ARCH_COMPILER_CLANG)
+#if ((ARCH_COMPILER_GCC_MAJOR == 3 && ARCH_COMPILER_GCC_MINOR >= 1) || \
+    ARCH_COMPILER_GCC_MAJOR > 3 || defined(ARCH_COMPILER_CLANG)) && !defined(ARCH_OS_WINDOWS)
 #define _AT_LEAST_GCC_THREE_ONE_OR_CLANG
 #endif
 
diff --git a/pxr/base/arch/env.cpp b/pxr/base/arch/env.cpp
index 490eb547..afd01a7c 100644
--- a/pxr/base/arch/env.cpp
+++ b/pxr/base/arch/env.cpp
@@ -19,7 +19,7 @@
 
 #if defined(ARCH_OS_DARWIN)
 #include <crt_externs.h>
-#else
+#elif !defined(ARCH_OS_WINDOWS)
 extern "C" char** environ;
 #endif
 
diff --git a/pxr/base/arch/errno.cpp b/pxr/base/arch/errno.cpp
index c30e5205..4a41f29b 100644
--- a/pxr/base/arch/errno.cpp
+++ b/pxr/base/arch/errno.cpp
@@ -37,8 +37,8 @@ ArchStrerror(int errorCode)
     //   (the string may be truncated if buflen is too small and errnum is
     //   unknown). The string always includes a terminating null byte.
     //
-    return strerror_r(errorCode, msg_buf, 256);
-#elif !defined(ARCH_COMPILER_MSVC)
+    strerror_r(errorCode, msg_buf, 256);
+#elif !defined(ARCH_OS_WINDOWS)
     strerror_r(errorCode, msg_buf, 256);
 #else
     strerror_s(msg_buf, 256, errorCode);
diff --git a/pxr/base/arch/fileSystem.cpp b/pxr/base/arch/fileSystem.cpp
index 50ce636c..91deb818 100644
--- a/pxr/base/arch/fileSystem.cpp
+++ b/pxr/base/arch/fileSystem.cpp
@@ -593,6 +593,7 @@ MakeUnique(
     int maxRetry = 1000)
 {
     static const bool init = (srand(GetTickCount()), true);
+    (void)init;
 
     // Copy template to a writable buffer.
     const auto length = sTemplate.size();
diff --git a/pxr/base/arch/fileSystem.h b/pxr/base/arch/fileSystem.h
index 432d6d70..d99c3931 100644
--- a/pxr/base/arch/fileSystem.h
+++ b/pxr/base/arch/fileSystem.h
@@ -49,6 +49,10 @@ PXR_NAMESPACE_OPEN_SCOPE
         #include <sys/param.h>                  /* for MAXPATHLEN */
     #endif
 #else
+    // S_ISDIR may be previously defined in pyport.h
+    #if defined(S_ISDIR)
+        #undef S_ISDIR
+    #endif
     // XXX -- Should probably have ARCH_ macro for this.
     #define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
 
diff --git a/pxr/base/arch/library.cpp b/pxr/base/arch/library.cpp
index 7319ef1b..ec383551 100644
--- a/pxr/base/arch/library.cpp
+++ b/pxr/base/arch/library.cpp
@@ -6,6 +6,7 @@
 //
 
 #include "pxr/pxr.h"
+#include "pxr/base/arch/pragmas.h"
 #include "pxr/base/arch/library.h"
 #include "pxr/base/arch/errno.h"
 
@@ -71,7 +72,10 @@ int ArchLibraryClose(void* handle)
 void* ArchLibraryGetSymbolAddress(void* handle, const char* name)
 {
 #if defined(ARCH_OS_WINDOWS)
+    ARCH_PRAGMA_PUSH
+    ARCH_PRAGMA_MICROSOFT_CAST
     return GetProcAddress(reinterpret_cast<HMODULE>(handle), name);
+    ARCH_PRAGMA_POP
 #else
     return dlsym(handle, name);
 #endif
diff --git a/pxr/base/arch/pragmas.h b/pxr/base/arch/pragmas.h
index 1d15ab74..6f614d1e 100644
--- a/pxr/base/arch/pragmas.h
+++ b/pxr/base/arch/pragmas.h
@@ -85,6 +85,31 @@
     #define ARCH_PRAGMA_INSTANCE_METHOD_NOT_FOUND \
         _Pragma("clang diagnostic ignored \"-Wobjc-method-access\"")
 
+    #define ARCH_PRAGMA_INT_FLOAT_CONVERSION
+        _Pragma("clang diagnostic ignored \"-Wimplicit-const-int-float-conversion\"")
+
+    #define ARCH_PRAGMA_POTENTIALLY_EVALUATED_EXPRESSION
+        _Pragma("clang diagnostic ignored \"-Wpotentially-evaluated-expression\"")
+
+    #define ARCH_PRAGMA_REINTERPRET_BASE_CLASS
+        _Pragma("clang diagnostic ignored \"-Wreinterpret-base-class\"")
+
+    #define ARCH_PRAGMA_MICROSOFT_CAST
+        _Pragma("clang diagnostic ignored \"-Wmicrosoft-cast\"")
+
+    #define ARCH_PRAGMA_UNUSED_LAMBDA_CAPTURE
+        _Pragma("clang diagnostic ignored \"-Wunused-lambda-capture\"")
+
+    #define ARCH_PRAGMA_UNUSED_VARIABLE
+        _Pragma("clang diagnostic ignored \"-Wunused-variable\"")
+
+    #define ARCH_PRAGMA_BITWISE_INSTEAD_OF_LOGICAL
+        _Pragma("clang diagnostic ignored \"-Wbitwise-instead-of-logical\"")
+
+    #define ARCH_PRAGMA_SELF_MOVE
+        _Pragma("clang diagnostic ignored \"-Wself-move\"")
+
+
 #elif defined(ARCH_COMPILER_MSVC)
 
     #define ARCH_PRAGMA_PUSH \
@@ -143,6 +168,9 @@
     #define ARCH_PRAGMA_UNARY_MINUS_ON_UNSIGNED \
         __pragma(warning(disable:4146)) 
 
+    #define ARCH_PRAGMA_SIGNED_AND_UNSIGNED_COMPARE \
+        __pragma(warning(disable:4018))
+
 #endif
 
 #if !defined ARCH_PRAGMA_PUSH
@@ -245,4 +273,40 @@
     #define ARCH_PRAGMA_INSTANCE_METHOD_NOT_FOUND
 #endif
 
+#if !defined ARCH_PRAGMA_INT_FLOAT_CONVERSION
+    #define ARCH_PRAGMA_INT_FLOAT_CONVERSION
+#endif
+
+#if !defined ARCH_PRAGMA_POTENTIALLY_EVALUATED_EXPRESSION
+    #define ARCH_PRAGMA_POTENTIALLY_EVALUATED_EXPRESSION
+#endif
+
+#if !defined(ARCH_PRAGMA_REINTERPRET_BASE_CLASS)
+    #define ARCH_PRAGMA_REINTERPRET_BASE_CLASS
+#endif
+
+#if !defined(ARCH_PRAGMA_MICROSOFT_CAST)
+    #define ARCH_PRAGMA_MICROSOFT_CAST
+#endif
+
+#if !defined(ARCH_PRAGMA_UNUSED_LAMBDA_CAPTURE)
+    #define ARCH_PRAGMA_UNUSED_LAMBDA_CAPTURE
+#endif
+
+#if !defined(ARCH_PRAGMA_UNUSED_VARIABLE)
+    #define ARCH_PRAGMA_UNUSED_VARIABLE
+#endif
+
+#if !defined(ARCH_PRAGMA_BITWISE_INSTEAD_OF_LOGICAL)
+    #define ARCH_PRAGMA_BITWISE_INSTEAD_OF_LOGICAL
+#endif
+
+#if !defined(ARCH_PRAGMA_SELF_MOVE)
+    #define ARCH_PRAGMA_SELF_MOVE
+#endif
+
+#if !defined(ARCH_PRAGMA_SIGNED_AND_UNSIGNED_COMPARE)
+    #define ARCH_PRAGMA_SIGNED_AND_UNSIGNED_COMPARE
+#endif
+
 #endif // PXR_BASE_ARCH_PRAGMAS_H
diff --git a/pxr/base/arch/stackTrace.cpp b/pxr/base/arch/stackTrace.cpp
index b93ec6fd..ba72bcc8 100644
--- a/pxr/base/arch/stackTrace.cpp
+++ b/pxr/base/arch/stackTrace.cpp
@@ -1445,7 +1445,7 @@ Arch_DefaultStackTraceCallback(uintptr_t address)
         Arch_DemangleFunctionName(&symbolName);
         const uintptr_t symbolOffset =
             (uint64_t)(address - (uintptr_t)symbolAddress);
-        return ArchStringPrintf("%s+%#0lx", symbolName.c_str(), symbolOffset);
+        return ArchStringPrintf("%s+%#0zx", symbolName.c_str(), symbolOffset);
     }
     else {
         return "<unknown>";
@@ -1514,7 +1514,7 @@ Arch_GetStackTrace(const vector<uintptr_t> &frames,
         if (skipUnknownFrames && symbolic == "<unknown>") {
             continue;
         }
-        rv.push_back(ArchStringPrintf(" #%-3i 0x%016lx in %s",
+        rv.push_back(ArchStringPrintf(" #%-3i 0x%016zx in %s",
                                       n++, frames[i], symbolic.c_str()));
     }
 
diff --git a/pxr/base/arch/symbols.cpp b/pxr/base/arch/symbols.cpp
index ac5b8ad4..75917602 100644
--- a/pxr/base/arch/symbols.cpp
+++ b/pxr/base/arch/symbols.cpp
@@ -111,7 +111,7 @@ ArchGetAddressInfo(
         }
 
         if (symbolName) {
-            *symbolName = symbol->Name ? symbol->Name : "";
+            *symbolName = symbol->NameLen > 0 ? symbol->Name : "";
         }
 
         if (symbolAddress) {
diff --git a/pxr/base/arch/testenv/testArchPRead.cpp b/pxr/base/arch/testenv/testArchPRead.cpp
index 8ee8efd2..2b8d01ce 100644
--- a/pxr/base/arch/testenv/testArchPRead.cpp
+++ b/pxr/base/arch/testenv/testArchPRead.cpp
@@ -29,6 +29,7 @@ int main(int argc, char** argv)
     }
     catch (const std::exception& e) {
         printf("ERROR: Invalid number of bytes specified\n");
+        (void)e;
         return 1;
     }
 
@@ -42,12 +43,12 @@ int main(int argc, char** argv)
     }
 
     const int64_t fileSize = ArchGetFileLength(f.get());
-    printf("Reading %s (%zu bytes)...\n", filename.c_str(), fileSize);
+    printf("Reading %s (%llu bytes)...\n", filename.c_str(), fileSize);
 
     std::unique_ptr<char[]> fileContents(new char[fileSize]);
     const int64_t numRead = ArchPRead(f.get(), fileContents.get(), fileSize, 0);
     if (numRead != fileSize) {
-        printf("ERROR: Read %zu bytes, expected %zu\n", numRead, fileSize);
+        printf("ERROR: Read %llu bytes, expected %llu\n", numRead, fileSize);
         return 1;
     }
 
diff --git a/pxr/base/arch/testenv/testArchUtil.cpp b/pxr/base/arch/testenv/testArchUtil.cpp
index cf219ff9..ec50d5fa 100644
--- a/pxr/base/arch/testenv/testArchUtil.cpp
+++ b/pxr/base/arch/testenv/testArchUtil.cpp
@@ -4,7 +4,9 @@
 // Licensed under the terms set forth in the LICENSE.txt file available at
 // https://openusd.org/license.
 //
-#define _CRT_SECURE_NO_WARNINGS
+#if !defined(_CRT_SECURE_NO_WARNINGS)
+    #define _CRT_SECURE_NO_WARNINGS
+#endif
 
 #include "pxr/pxr.h"
 #include "pxr/base/arch/testArchUtil.h"
@@ -70,7 +72,7 @@ Arch_ReadInvalidAddresses(bool spawnthread)
     for (size_t i = 0; i != ~0ull; ++i) {
         // This will eventually give us NULL in a way that the compiler probably
         // cannot prove at compile-time.
-        char const *ptr = reinterpret_cast<char const *>(rand() & 7);
+        char const *ptr = reinterpret_cast<char const *>((intptr_t)rand() & 7);
         printf("byte %p = %d\n", ptr, *ptr);
     }
 
diff --git a/pxr/base/gf/numericCast.h b/pxr/base/gf/numericCast.h
index 73a16399..42f09635 100644
--- a/pxr/base/gf/numericCast.h
+++ b/pxr/base/gf/numericCast.h
@@ -8,6 +8,7 @@
 #define PXR_BASE_GF_NUMERIC_CAST_H
 
 #include "pxr/pxr.h"
+#include "pxr/base/arch/pragmas.h"
 
 #include "pxr/base/gf/traits.h"
 
@@ -25,6 +26,9 @@ PXR_NAMESPACE_OPEN_SCOPE
 /// This mimics the C++20 std::cmp_less function for comparing integers of
 /// different types where negative signed integers always compare less than (and
 /// not equal to) unsigned integers.
+ARCH_PRAGMA_PUSH
+ARCH_PRAGMA_UNSAFE_USE_OF_BOOL
+ARCH_PRAGMA_SIGNED_AND_UNSIGNED_COMPARE
 template <class T, class U>
 constexpr bool
 GfIntegerCompareLess(T t, U u) noexcept
@@ -41,6 +45,7 @@ GfIntegerCompareLess(T t, U u) noexcept
         return u >= 0 && t < std::make_unsigned_t<U>(u);
     }
 }
+ARCH_PRAGMA_POP
 
 enum GfNumericCastFailureType {
     GfNumericCastPosOverflow,  ///< Value too high to convert.
diff --git a/pxr/base/plug/CMakeLists.txt b/pxr/base/plug/CMakeLists.txt
index 6d4c74ce..e5f3de8e 100644
--- a/pxr/base/plug/CMakeLists.txt
+++ b/pxr/base/plug/CMakeLists.txt
@@ -101,10 +101,17 @@ pxr_build_test_shared_lib(TestPlugDsoUnloadable
 # link flag to force these symbols to be looked up at runtime.
 if (TARGET TestPlugDsoUnloadable)
     if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
-        set_target_properties(TestPlugDsoUnloadable
-            PROPERTIES
-            LINK_FLAGS "-undefined dynamic_lookup"
-        )
+        if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
+            set_target_properties(TestPlugDsoUnloadable
+                PROPERTIES
+                LINK_FLAGS "-Wl,/force:unresolved -Wl,/ignore:4088 -Wl,/ignore:2019"
+            )
+        else()
+            set_target_properties(TestPlugDsoUnloadable
+                PROPERTIES
+                LINK_FLAGS "-undefined dynamic_lookup"
+            )
+        endif()
     elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
         # This forces the link to complete but the linker will still
         # report the missing symbol as an error and will also emit a
diff --git a/pxr/base/tf/fileUtils.cpp b/pxr/base/tf/fileUtils.cpp
index 9f8282be..6778ca86 100644
--- a/pxr/base/tf/fileUtils.cpp
+++ b/pxr/base/tf/fileUtils.cpp
@@ -365,7 +365,7 @@ TfReadDir(
     if((hFind = FindFirstFileW(szPath, &fdFile)) == INVALID_HANDLE_VALUE)
     {
         if (errMsg) {
-            *errMsg = TfStringPrintf("Path not found: %s", szPath);
+            *errMsg = TfStringPrintf("Path not found: %ls", szPath);
         }
         return false;
     }
diff --git a/pxr/base/tf/mallocTag.cpp b/pxr/base/tf/mallocTag.cpp
index 27cbaa00..9863ba41 100644
--- a/pxr/base/tf/mallocTag.cpp
+++ b/pxr/base/tf/mallocTag.cpp
@@ -1225,7 +1225,7 @@ _GetAsCommaSeparatedString(size_t number)
 {
     string result;
 
-    string str = TfStringPrintf("%ld", number);
+    string str = TfStringPrintf("%zu", number);
     size_t n = str.size();
 
     TF_FOR_ALL(it, str) {
@@ -1355,7 +1355,7 @@ _PrintMallocCallSites(
     const size_t maxPercentageWidth = 15;
 
     string fmt = TfStringPrintf(
-        "%%-%lds %%%lds %%%lds\n",
+        "%%-%zus %%%zus %%%zus\n",
         maxNameWidth, maxBytesWidth, maxPercentageWidth);
 
     *rpt += TfStringPrintf(fmt.c_str(), "NAME", "BYTES", "%ROOT");
@@ -1436,7 +1436,7 @@ _ReportMallocNode(
     }
 
     out << TfStringPrintf(
-        "%13s B %13s B %7ld samples    ",
+        "%13s B %13s B %7zu samples    ",
         _GetAsCommaSeparatedString(node.nBytes).c_str(),
         _GetAsCommaSeparatedString(node.nBytesDirect).c_str(),
         node.nAllocations);
diff --git a/pxr/base/tf/pyClassMethod.h b/pxr/base/tf/pyClassMethod.h
index 395ec6fa..8f6e220c 100644
--- a/pxr/base/tf/pyClassMethod.h
+++ b/pxr/base/tf/pyClassMethod.h
@@ -26,7 +26,7 @@ using namespace pxr_boost::python;
 // except it uses PyClassMethod_New() instead of PyStaticMethod_New().
 struct _TfPyClassMethod : def_visitor<_TfPyClassMethod>
 {
-    friend class def_visitor_access;
+    friend class pxr_boost::python::def_visitor_access;
 
     _TfPyClassMethod(const std::string &methodName) :
         _methodName(methodName) {}
diff --git a/pxr/base/tf/pyExceptionState.h b/pxr/base/tf/pyExceptionState.h
index bcbbce71..c29e306c 100644
--- a/pxr/base/tf/pyExceptionState.h
+++ b/pxr/base/tf/pyExceptionState.h
@@ -8,6 +8,7 @@
 #include "pxr/pxr.h"
 #include "pxr/base/tf/api.h"
 #include "pxr/external/boost/python/handle.hpp"
+#include <string>
 
 PXR_NAMESPACE_OPEN_SCOPE
 
diff --git a/pxr/base/tf/pyPtrHelpers.h b/pxr/base/tf/pyPtrHelpers.h
index c66b71cf..52be9a7f 100644
--- a/pxr/base/tf/pyPtrHelpers.h
+++ b/pxr/base/tf/pyPtrHelpers.h
@@ -293,7 +293,7 @@ converter::to_python_function_t
 _PtrToPythonWrapper<T>::_originalConverter = 0;
 
 struct WeakPtr : def_visitor<WeakPtr> {
-    friend class def_visitor_access;
+    friend class pxr_boost::python::def_visitor_access;
 
     template <typename WrapperPtrType, typename Wrapper, typename T>
     static void _RegisterConversions(Wrapper *, T *) {
@@ -389,7 +389,7 @@ struct WeakPtr : def_visitor<WeakPtr> {
 };
 
 struct RefAndWeakPtr : def_visitor<RefAndWeakPtr> {
-    friend class def_visitor_access;
+    friend class pxr_boost::python::def_visitor_access;
 
     template <typename CLS, typename Wrapper, typename T>
     static void _AddAPI(Wrapper *, T *) {
diff --git a/pxr/base/tf/singleton.h b/pxr/base/tf/singleton.h
index 8b2b48ae..05f01284 100644
--- a/pxr/base/tf/singleton.h
+++ b/pxr/base/tf/singleton.h
@@ -177,8 +177,10 @@ public:
     
 private:
     static T *_CreateInstance(std::atomic<T *> &instance);
-    
+    ARCH_PRAGMA_PUSH
+    ARCH_PRAGMA_NEEDS_EXPORT_INTERFACE
     static std::atomic<T *> _instance;
+    ARCH_PRAGMA_POP
 };
 
 PXR_NAMESPACE_CLOSE_SCOPE
diff --git a/pxr/base/tf/stringUtils.cpp b/pxr/base/tf/stringUtils.cpp
index 7110aee3..7e636580 100644
--- a/pxr/base/tf/stringUtils.cpp
+++ b/pxr/base/tf/stringUtils.cpp
@@ -793,8 +793,12 @@ TfDictionaryLessThan::_LessImpl(const string& lstr, const string& rstr) const
             // Add 5 mod 32 makes '_' sort before all letters.
             return ((l + 5) & 31) < ((r + 5) & 31);
         }
-        else if (IsDigit(l) | IsDigit(r)) {
+        ARCH_PRAGMA_PUSH
+        ARCH_PRAGMA_BITWISE_INSTEAD_OF_LOGICAL
+        // Intentionally using bitwise operators due to performance critical code path.
+         else if (IsDigit(l) | IsDigit(r)) {
             if (IsDigit(l) & IsDigit(r)) {
+        ARCH_PRAGMA_POP
                 // We backtrack to find the start of each digit string, then we
                 // scan each digit string, ignoring leading zeros to put the two
                 // strings into alignment with their most significant digits.
@@ -856,7 +860,11 @@ TfDictionaryLessThan::_LessImpl(const string& lstr, const string& rstr) const
                 curEnd = lcur + std::min(std::distance(lcur, lend),
                                          std::distance(rcur, rend));
             }
+            ARCH_PRAGMA_PUSH
+            ARCH_PRAGMA_BITWISE_INSTEAD_OF_LOGICAL
+             // Intentionally using bitwise operators due to performance critical code path.
             else if (IsDigit(l) | IsDigit(r)) {
+            ARCH_PRAGMA_POP
                 if (lcur == lstr.c_str()) {
                     return l < r;
                 }
diff --git a/pxr/base/tf/testenv/delegatedCountPtr.cpp b/pxr/base/tf/testenv/delegatedCountPtr.cpp
index 0fd5499c..8ebcc443 100644
--- a/pxr/base/tf/testenv/delegatedCountPtr.cpp
+++ b/pxr/base/tf/testenv/delegatedCountPtr.cpp
@@ -169,7 +169,10 @@ TestMovingSelf()
         TfDelegatedCountIncrementTag, &stackOwnedValue};
     TF_AXIOM(adopted);
     TF_AXIOM(stackOwnedValue.count == 2);
+    ARCH_PRAGMA_PUSH
+    ARCH_PRAGMA_SELF_MOVE
     adopted = std::move(adopted);
+    ARCH_PRAGMA_POP
     TF_AXIOM(adopted.get() == nullptr);
     TF_AXIOM(stackOwnedValue.count == 1);
     return true;
diff --git a/pxr/base/tf/testenv/hash.cpp b/pxr/base/tf/testenv/hash.cpp
index d14f2308..dc91ba88 100644
--- a/pxr/base/tf/testenv/hash.cpp
+++ b/pxr/base/tf/testenv/hash.cpp
@@ -100,7 +100,7 @@ _TestStatsOne(Hasher const &h, char const *label)
         TestOne(h, num, counts);
     }
 
-    printf("%s One: %zu tests.\n", label, NTESTS * 64);
+    printf("%s One: %llu tests.\n", label, NTESTS * 64);
     for (int i = 0; i != 64; ++i) {
         printf("bit %d flipped %d times (%.2f%%)\n", i, counts[i],
                100.0 * double(counts[i]) / (double(NTESTS) * 64.0));
@@ -128,7 +128,7 @@ _TestStatsTwo(Hasher const &h, char const *label)
         TestTwo(h, t, counts);
     }
 
-    printf("%s Two: %zu tests.\n", label, NTESTS * 64);
+    printf("%s Two: %llu tests.\n", label, NTESTS * 64);
     for (int i = 0; i != 64; ++i) {
         printf("bit %d flipped %d times (%.2f%%)\n", i, counts[i],
                100.0 * double(counts[i]) / (double(NTESTS) * 64.0));
diff --git a/pxr/base/tf/testenv/scopeDescription.cpp b/pxr/base/tf/testenv/scopeDescription.cpp
index a67334f2..e4c8b4bc 100644
--- a/pxr/base/tf/testenv/scopeDescription.cpp
+++ b/pxr/base/tf/testenv/scopeDescription.cpp
@@ -85,6 +85,7 @@ TestOverhead()
     } while (sw.GetSeconds() < 0.5);
     // printf("%zd rand calls in %f seconds: %u\n",
     //        count, sw.GetSeconds(), val);
+    (void)val;
     double baseSecsPerCall = sw.GetSeconds() / double(count);
 
     count = 0;
diff --git a/pxr/base/tf/wrapTestPyStaticTokens.cpp b/pxr/base/tf/wrapTestPyStaticTokens.cpp
index 40df9c6b..2779eff4 100644
--- a/pxr/base/tf/wrapTestPyStaticTokens.cpp
+++ b/pxr/base/tf/wrapTestPyStaticTokens.cpp
@@ -16,7 +16,7 @@ PXR_NAMESPACE_OPEN_SCOPE
     (orange)                            \
     ((pear, "d'Anjou"))                 
 
-TF_DECLARE_PUBLIC_TOKENS(tfTestStaticTokens, TF_API, TF_TEST_TOKENS);
+TF_DECLARE_PUBLIC_TOKENS(tfTestStaticTokens, TF_TEST_TOKENS);
 TF_DEFINE_PUBLIC_TOKENS(tfTestStaticTokens, TF_TEST_TOKENS);
 
 PXR_NAMESPACE_CLOSE_SCOPE
diff --git a/pxr/base/tf/wrapTypeHelpers.h b/pxr/base/tf/wrapTypeHelpers.h
index a7f99f29..4a824bbc 100644
--- a/pxr/base/tf/wrapTypeHelpers.h
+++ b/pxr/base/tf/wrapTypeHelpers.h
@@ -24,7 +24,7 @@ namespace TfType_WrapHelpers {
 
     struct _PythonClass : def_visitor<_PythonClass>
     {
-        friend class def_visitor_access;
+        friend class pxr_boost::python::def_visitor_access;
             
     private:
         template <class CLS, class T>
diff --git a/pxr/base/trace/wrapCollector.cpp b/pxr/base/trace/wrapCollector.cpp
index ed24dfb4..47ff2a55 100644
--- a/pxr/base/trace/wrapCollector.cpp
+++ b/pxr/base/trace/wrapCollector.cpp
@@ -27,7 +27,7 @@ static double
 GetElapsedSeconds(TraceEvent::TimeStamp begin, TraceEvent::TimeStamp end)
 {
     if (begin > end) {
-        TF_CODING_ERROR("Invalid interval: begin=%zu, end=%zu", begin, end);
+        TF_CODING_ERROR("Invalid interval: begin=%llu, end=%llu", begin, end);
         return 0.0;
     }
     return ArchTicksToSeconds(end-begin);
diff --git a/pxr/base/ts/regressionPreventer.h b/pxr/base/ts/regressionPreventer.h
index da690a16..dcfc940b 100644
--- a/pxr/base/ts/regressionPreventer.h
+++ b/pxr/base/ts/regressionPreventer.h
@@ -42,7 +42,7 @@ public:
     /// knot is the one that is being edited in an interactive case.  Batch
     /// cases can't use these modes because we are adjusting an existing spline,
     /// rather than editing a single knot.
-    enum TS_API InteractiveMode
+    enum InteractiveMode
     {
         /// Shorten the proposed tangents of the active knot so that there is no
         /// regression, leaving the neighbor tangents alone.
diff --git a/pxr/base/vt/array.h b/pxr/base/vt/array.h
index 79157fa9..ffecb872 100644
--- a/pxr/base/vt/array.h
+++ b/pxr/base/vt/array.h
@@ -55,7 +55,7 @@ protected:
 };
 
 // Private base class helper for VtArray implementation.
-class Vt_ArrayBase
+class VT_API Vt_ArrayBase
 {
 public:
     Vt_ArrayBase() : _shapeData { 0 }, _foreignSource(nullptr) {}
@@ -114,7 +114,7 @@ protected:
         return _GetControlBlock(nativeData).capacity;
     }
 
-    VT_API void _DetachCopyHook(char const *funcName) const;
+    void _DetachCopyHook(char const *funcName) const;
 
     Vt_ShapeData _shapeData;
     Vt_ArrayForeignDataSource *_foreignSource;
diff --git a/pxr/base/vt/wrapArrayDualQuaternion.cpp b/pxr/base/vt/wrapArrayDualQuaternion.cpp
index cfbc2386..8a12901a 100644
--- a/pxr/base/vt/wrapArrayDualQuaternion.cpp
+++ b/pxr/base/vt/wrapArrayDualQuaternion.cpp
@@ -20,3 +20,14 @@ PXR_NAMESPACE_USING_DIRECTIVE
 void wrapArrayDualQuaternion() {
     TF_PP_SEQ_FOR_EACH(VT_WRAP_ARRAY, ~, VT_DUALQUATERNION_VALUE_TYPES);
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<GfDualQuath>;
+template class VtArray<GfDualQuatf>;
+template class VtArray<GfDualQuatd>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayFloat.cpp b/pxr/base/vt/wrapArrayFloat.cpp
index 587f70b7..89ffc959 100644
--- a/pxr/base/vt/wrapArrayFloat.cpp
+++ b/pxr/base/vt/wrapArrayFloat.cpp
@@ -17,3 +17,14 @@ void wrapArrayFloat() {
     TF_PP_SEQ_FOR_EACH(VT_WRAP_ARRAY, ~,
                        VT_FLOATING_POINT_BUILTIN_VALUE_TYPES);
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<double>;
+template class VtArray<float>;
+template class VtArray<GfHalf>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayIntegral.cpp b/pxr/base/vt/wrapArrayIntegral.cpp
index abbc4841..4ceee02c 100644
--- a/pxr/base/vt/wrapArrayIntegral.cpp
+++ b/pxr/base/vt/wrapArrayIntegral.cpp
@@ -18,3 +18,20 @@ void wrapArrayIntegral() {
     TF_PP_SEQ_FOR_EACH(VT_WRAP_ARRAY, ~,
                        VT_INTEGRAL_BUILTIN_VALUE_TYPES);
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<bool>;
+template class VtArray<char>;
+template class VtArray<unsigned char>;
+template class VtArray<short>;
+template class VtArray<unsigned short>;
+template class VtArray<int>;
+template class VtArray<unsigned int>;
+template class VtArray<__int64>;
+template class VtArray<unsigned __int64>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayMatrix.cpp b/pxr/base/vt/wrapArrayMatrix.cpp
index f208cb37..c21c17eb 100644
--- a/pxr/base/vt/wrapArrayMatrix.cpp
+++ b/pxr/base/vt/wrapArrayMatrix.cpp
@@ -17,3 +17,17 @@ PXR_NAMESPACE_USING_DIRECTIVE
 void wrapArrayMatrix() {
     TF_PP_SEQ_FOR_EACH(VT_WRAP_ARRAY, ~, VT_MATRIX_VALUE_TYPES);
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<GfMatrix4f>;
+template class VtArray<GfMatrix3f>;
+template class VtArray<GfMatrix2f>;
+template class VtArray<GfMatrix4d>;
+template class VtArray<GfMatrix3d>;
+template class VtArray<GfMatrix2d>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayQuaternion.cpp b/pxr/base/vt/wrapArrayQuaternion.cpp
index d1d35922..9642fb0a 100644
--- a/pxr/base/vt/wrapArrayQuaternion.cpp
+++ b/pxr/base/vt/wrapArrayQuaternion.cpp
@@ -20,3 +20,15 @@ PXR_NAMESPACE_USING_DIRECTIVE
 void wrapArrayQuaternion() {
     TF_PP_SEQ_FOR_EACH(VT_WRAP_ARRAY, ~, VT_QUATERNION_VALUE_TYPES);
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<GfQuath>;
+template class VtArray<GfQuatf>;
+template class VtArray<GfQuatd>;
+template class VtArray<GfQuaternion>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayRange.cpp b/pxr/base/vt/wrapArrayRange.cpp
index e83066be..ec486847 100644
--- a/pxr/base/vt/wrapArrayRange.cpp
+++ b/pxr/base/vt/wrapArrayRange.cpp
@@ -16,3 +16,19 @@ PXR_NAMESPACE_USING_DIRECTIVE
 void wrapArrayRange() {
     TF_PP_SEQ_FOR_EACH(VT_WRAP_ARRAY, ~, VT_RANGE_VALUE_TYPES);
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<GfRange3f>;
+template class VtArray<GfRange3d>;
+template class VtArray<GfRange2f>;
+template class VtArray<GfRange2d>;
+template class VtArray<GfRange1f>;
+template class VtArray<GfRange1d>;
+template class VtArray<GfInterval>;
+template class VtArray<GfRect2i>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayString.cpp b/pxr/base/vt/wrapArrayString.cpp
index a3c09cc2..166a9916 100644
--- a/pxr/base/vt/wrapArrayString.cpp
+++ b/pxr/base/vt/wrapArrayString.cpp
@@ -18,3 +18,12 @@ PXR_NAMESPACE_USING_DIRECTIVE
 void wrapArrayString() {
     VtWrapArray<VtArray<string> >();
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<string>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayToken.cpp b/pxr/base/vt/wrapArrayToken.cpp
index dc67f980..4a4c30ca 100644
--- a/pxr/base/vt/wrapArrayToken.cpp
+++ b/pxr/base/vt/wrapArrayToken.cpp
@@ -14,3 +14,12 @@ PXR_NAMESPACE_USING_DIRECTIVE
 void wrapArrayToken() {
     VtWrapArray<VtArray<TfToken> >();
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<TfToken>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/base/vt/wrapArrayVec.cpp b/pxr/base/vt/wrapArrayVec.cpp
index 9bd37d0d..9713b4bb 100644
--- a/pxr/base/vt/wrapArrayVec.cpp
+++ b/pxr/base/vt/wrapArrayVec.cpp
@@ -32,3 +32,23 @@ void wrapArrayVec() {
     TF_PP_SEQ_FOR_EACH(VT_WRAP_ARRAY, ~, VT_VEC_VALUE_TYPES);
     //BOOST_PP_SEQ_FOR_EACH(VT_WRAP_COMPARISON, ~, VT_VEC_VALUE_TYPES);
 }
+
+#if defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<GfVec4i>;
+template class VtArray<GfVec3i>;
+template class VtArray<GfVec2i>;
+template class VtArray<GfVec4h>;
+template class VtArray<GfVec3h>;
+template class VtArray<GfVec2h>;
+template class VtArray<GfVec4f>;
+template class VtArray<GfVec3f>;
+template class VtArray<GfVec2f>;
+template class VtArray<GfVec4d>;
+template class VtArray<GfVec3d>;
+template class VtArray<GfVec2d>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_COMPILER_CLANG) && defined(ARCH_OS_WINDOWS)
diff --git a/pxr/external/boost/python/object_core.hpp b/pxr/external/boost/python/object_core.hpp
index 036a6d44..93c2677c 100644
--- a/pxr/external/boost/python/object_core.hpp
+++ b/pxr/external/boost/python/object_core.hpp
@@ -246,7 +246,7 @@ namespace api
       );
   }
   
-  class object : public object_base
+  class PXR_BOOST_PYTHON_DECL object : public object_base
   {
    public:
       // default constructor creates a None object
@@ -260,7 +260,7 @@ namespace api
       }
 
       // Throw error_already_set() if the handle is null.
-      PXR_BOOST_PYTHON_DECL explicit object(handle<> const&);
+      explicit object(handle<> const&);
    private:
       
    public: // implementation detail -- for internal use only
diff --git a/pxr/external/boost/python/src/object/function.cpp b/pxr/external/boost/python/src/object/function.cpp
index 051956f8..77d3e6de 100644
--- a/pxr/external/boost/python/src/object/function.cpp
+++ b/pxr/external/boost/python/src/object/function.cpp
@@ -160,7 +160,15 @@ PyObject* function::call(PyObject* args, PyObject* keywords) const
                     else
                     {
                         // build a new arg tuple, will adjust its size later
+                        // Depending on the version of PY this may be always true, disabling warning
+#if defined(__clang__)
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wtautological-constant-out-of-range-compare"
+#endif
                         assert(max_arity <= static_cast<std::size_t>(ssize_t_max));
+#if defined(__clang__)
+#pragma clang diagnostic pop
+#endif
                         inner_args = handle<>(
                             PyTuple_New(static_cast<ssize_t>(max_arity)));
 
diff --git a/pxr/external/boost/python/test/polymorphism2.cpp b/pxr/external/boost/python/test/polymorphism2.cpp
index b8132f4b..92fe7290 100644
--- a/pxr/external/boost/python/test/polymorphism2.cpp
+++ b/pxr/external/boost/python/test/polymorphism2.cpp
@@ -83,7 +83,7 @@ struct DCallback :  D,  wrapper<D>
         if (override f = this->get_override("f"))
             return f();
         //else
-            return D::f();
+        return D::f();
     }
 };
 
diff --git a/pxr/imaging/hd/perfLog.cpp b/pxr/imaging/hd/perfLog.cpp
index b401a8f7..769f2f13 100644
--- a/pxr/imaging/hd/perfLog.cpp
+++ b/pxr/imaging/hd/perfLog.cpp
@@ -46,7 +46,7 @@ HdPerfLog::AddCacheHit(TfToken const& name,
         return;
     _Lock lock(_mutex);
     _cacheMap[name].AddHit();
-    TF_DEBUG(HD_CACHE_HITS).Msg("Cache hit: %s %s %s hits: %lu\n",
+    TF_DEBUG(HD_CACHE_HITS).Msg("Cache hit: %s %s %s hits: %zu\n",
             name.GetText(),
             id.GetText(),
             tag.GetText(),
@@ -62,7 +62,7 @@ HdPerfLog::AddCacheMiss(TfToken const& name,
         return;
     _Lock lock(_mutex);
     _cacheMap[name].AddMiss();
-    TF_DEBUG(HD_CACHE_MISSES).Msg("Cache miss: %s %s %s Total misses: %lu\n",
+    TF_DEBUG(HD_CACHE_MISSES).Msg("Cache miss: %s %s %s Total misses: %zu\n",
             name.GetText(),
             id.GetText(),
             tag.GetText(),
diff --git a/pxr/imaging/hd/sortedIds.h b/pxr/imaging/hd/sortedIds.h
index 4a41e316..de4c23a2 100644
--- a/pxr/imaging/hd/sortedIds.h
+++ b/pxr/imaging/hd/sortedIds.h
@@ -72,7 +72,7 @@ public:
     void Clear();
 
 private:
-    class _UpdateImpl;
+    struct _UpdateImpl;
 
     enum _EditMode { _NoMode, _InsertMode, _RemoveMode, _UpdateMode };
     
diff --git a/pxr/imaging/hd/testenv/testHdSortedIdsPerf.cpp b/pxr/imaging/hd/testenv/testHdSortedIdsPerf.cpp
index 92dd59ae..dafcf56b 100644
--- a/pxr/imaging/hd/testenv/testHdSortedIdsPerf.cpp
+++ b/pxr/imaging/hd/testenv/testHdSortedIdsPerf.cpp
@@ -44,7 +44,7 @@ _GetInitPaths()
             }
         }
         // Shuffle paths randomly.
-        const size_t seed = 5109223000;
+        const std::mt19937::result_type seed = 814255704;
         std::mt19937 randomGen(seed);
         std::shuffle(paths.begin(), paths.end(), randomGen);
 
@@ -263,7 +263,7 @@ ScatteredRemoveInsertTest(Metrics &metrics, unsigned divisor,
         SdfPathVector ret;
         const SdfPathVector &initPaths = _GetInitPaths();
         // Take random indexes that cover 10% of the total.
-        std::mt19937 gen(5109223000);
+        std::mt19937 gen(814255704);
         std::uniform_int_distribution<> distrib(0, initPaths.size()-1);
         for (size_t i = 0; i != initPaths.size() / divisor; ++i) {
             ret.push_back(initPaths[distrib(gen)]);
@@ -384,9 +384,9 @@ int main()
     FILE *statsFile = fopen("perfstats.raw", "w");
     for (const auto &[metricName, ns]: metrics) {
         fprintf(statsFile,
-                "{'profile':'%s','metric':'time','value':%zd,'samples':1}\n",
+                "{'profile':'%s','metric':'time','value':%lld,'samples':1}\n",
                 metricName.c_str(), ns);
-        printf("%s : %zd ns\n", metricName.c_str(), ns);
+        printf("%s : %lld ns\n", metricName.c_str(), ns);
     }
     fclose(statsFile);
     
diff --git a/pxr/imaging/hdSt/bufferArrayRegistry.cpp b/pxr/imaging/hdSt/bufferArrayRegistry.cpp
index 60d57964..8a1e32f5 100644
--- a/pxr/imaging/hdSt/bufferArrayRegistry.cpp
+++ b/pxr/imaging/hdSt/bufferArrayRegistry.cpp
@@ -156,8 +156,8 @@ HdStBufferArrayRegistry::ReallocateAll(HdStAggregationStrategy *strategy)
                 if (numElements > maxTotalElements) {
                     // Issue a warning and reset number of elements in the BAR.
                     TF_WARN("Number of elements in the buffer array range "
-                            "(0x%lx) is _larger_ than the maximum number of "
-                            "elements in the buffer array (0x%lx). 0x%lx bytes "
+                            "(0x%zx) is _larger_ than the maximum number of "
+                            "elements in the buffer array (0x%zx). 0x%zx bytes "
                             "of data will be skipped.",
                             numElements, maxTotalElements,
                             numElements - maxTotalElements);
@@ -270,7 +270,6 @@ HdStBufferArrayRegistry::_InsertNewBufferArray(
 }
 
 
-HD_API
 std::ostream &
 operator <<(std::ostream &out, const HdStBufferArrayRegistry& self)
 {
diff --git a/pxr/imaging/hdSt/codeGen.cpp b/pxr/imaging/hdSt/codeGen.cpp
index 15a40a31..914b107c 100644
--- a/pxr/imaging/hdSt/codeGen.cpp
+++ b/pxr/imaging/hdSt/codeGen.cpp
@@ -37,7 +37,7 @@
 #include <sstream>
 #include <unordered_map>
 
-#if defined(__APPLE__)
+#if defined(__apple_build_version__)
 #include <opensubdiv/osd/mtlPatchShaderSource.h>
 #else
 #include <opensubdiv/osd/glslPatchShaderSource.h>
@@ -1663,7 +1663,7 @@ _GetOSDCommonShaderSource()
     std::stringstream ss;
 
 #if OPENSUBDIV_VERSION_NUMBER >= 30600
-#if defined(__APPLE__)
+#if defined(__apple_build_version__)
     ss << OpenSubdiv::Osd::MTLPatchShaderSource::GetPatchDrawingShaderSource();
 #else
     ss << "FORWARD_DECL(MAT4 GetProjectionMatrix());\n"
@@ -1719,7 +1719,7 @@ std::string
 _GetOSDPatchBasisShaderSource()
 {
     std::stringstream ss;
-#if defined(__APPLE__)
+#if defined(__apple_build_version__)
     ss << "#define OSD_PATCH_BASIS_METAL\n";
     ss << OpenSubdiv::Osd::MTLPatchShaderSource::GetPatchBasisShaderSource();
 #else
diff --git a/pxr/imaging/hdSt/commandBuffer.cpp b/pxr/imaging/hdSt/commandBuffer.cpp
index 3469792b..f1e9a75b 100644
--- a/pxr/imaging/hdSt/commandBuffer.cpp
+++ b/pxr/imaging/hdSt/commandBuffer.cpp
@@ -504,7 +504,7 @@ HdStCommandBuffer::_RebuildDrawBatches(Hgi const *hgi)
     }
 
     TF_DEBUG(HDST_DRAW_BATCH).Msg(
-        "   %lu draw batches created for %lu draw items\n", _drawBatches.size(),
+        "   %zu draw batches created for %zu draw items\n", _drawBatches.size(),
         drawItems.size());
 }
 
diff --git a/pxr/imaging/hdSt/interleavedMemoryManager.cpp b/pxr/imaging/hdSt/interleavedMemoryManager.cpp
index 1aa4664e..60fa51c9 100644
--- a/pxr/imaging/hdSt/interleavedMemoryManager.cpp
+++ b/pxr/imaging/hdSt/interleavedMemoryManager.cpp
@@ -676,7 +676,7 @@ HdStInterleavedMemoryManager::_StripedInterleavedBufferRange::Resize(int numElem
 
         if (static_cast<size_t>(numElements) > numMaxElements) {
             TF_WARN("Attempting to resize the BAR with 0x%x elements when the "
-                    "max number of elements in the buffer array is 0x%lx. "
+                    "max number of elements in the buffer array is 0x%zx. "
                     "Clamping BAR size to the latter.",
                      numElements, numMaxElements);
 
diff --git a/pxr/imaging/hdSt/primUtils.cpp b/pxr/imaging/hdSt/primUtils.cpp
index 6d985b8e..a2458b5c 100644
--- a/pxr/imaging/hdSt/primUtils.cpp
+++ b/pxr/imaging/hdSt/primUtils.cpp
@@ -641,7 +641,7 @@ HdStUpdateDrawItemBAR(
         
         if (newRangeValid) {
             TfDebug::Helper().Msg(
-                "Buffer array version for the new range is %lu\n",
+                "Buffer array version for the new range is %zu\n",
                 newRange->GetVersion());
         }
 
diff --git a/pxr/imaging/hdSt/renderDelegate.cpp b/pxr/imaging/hdSt/renderDelegate.cpp
index 37d22c51..0ec220a4 100644
--- a/pxr/imaging/hdSt/renderDelegate.cpp
+++ b/pxr/imaging/hdSt/renderDelegate.cpp
@@ -79,10 +79,13 @@ const TfTokenVector HdStRenderDelegate::SUPPORTED_SPRIM_TYPES =
 };
 
 #ifdef PXR_MATERIALX_SUPPORT_ENABLED
+ARCH_PRAGMA_PUSH
+ARCH_PRAGMA_UNUSED_VARIABLE
 TF_DEFINE_PRIVATE_TOKENS(
     _tokens,
     (mtlx)
 );
+ARCH_PRAGMA_POP
 #endif
 
 using HdStResourceRegistryWeakPtr =  std::weak_ptr<HdStResourceRegistry>;
diff --git a/pxr/imaging/hdSt/testenv/testHdStDisplayStyle.cpp b/pxr/imaging/hdSt/testenv/testHdStDisplayStyle.cpp
index d8b19708..0fb2fa3d 100644
--- a/pxr/imaging/hdSt/testenv/testHdStDisplayStyle.cpp
+++ b/pxr/imaging/hdSt/testenv/testHdStDisplayStyle.cpp
@@ -52,7 +52,7 @@ public:
     void Present(uint32_t framebuffer) override;
 
 protected:
-    virtual void ParseArgs(int argc, char *argv[]);
+    virtual void ParseArgs(int argc, char *argv[]) override;
 
 private:
     TfToken _reprName;
diff --git a/pxr/imaging/hdSt/testenv/testHdStDrawItemIntegrity.cpp b/pxr/imaging/hdSt/testenv/testHdStDrawItemIntegrity.cpp
index d3cdeb38..d42131e5 100644
--- a/pxr/imaging/hdSt/testenv/testHdStDrawItemIntegrity.cpp
+++ b/pxr/imaging/hdSt/testenv/testHdStDrawItemIntegrity.cpp
@@ -88,7 +88,7 @@ public:
     void Present(uint32_t framebuffer) override;
 
 protected:
-    virtual void ParseArgs(int argc, char *argv[]);
+    virtual void ParseArgs(int argc, char *argv[]) override;
 
     void _Draw(const std::vector<int> & passIdx, int refineLevel);
 
diff --git a/pxr/imaging/hdSt/testenv/testHdStDrawItemsCache.cpp b/pxr/imaging/hdSt/testenv/testHdStDrawItemsCache.cpp
index ac647f27..18c75198 100644
--- a/pxr/imaging/hdSt/testenv/testHdStDrawItemsCache.cpp
+++ b/pxr/imaging/hdSt/testenv/testHdStDrawItemsCache.cpp
@@ -250,13 +250,13 @@ public:
     ~My_TestGLDrawing() = default;
 
     // Hd_UnitTestGLDrawing overrides
-    virtual void InitTest();
-    virtual void DrawTest();
-    virtual void OffscreenTest();
+    virtual void InitTest() override;
+    virtual void DrawTest() override;
+    virtual void OffscreenTest() override;
     void Present(uint32_t framebuffer) override;
 
 protected:
-    virtual void ParseArgs(int argc, char *argv[]);
+    virtual void ParseArgs(int argc, char *argv[]) override;
 
     void _Draw(std::vector<size_t> vieverIds);
 
diff --git a/pxr/imaging/hdSt/testenv/testHdStDynamicUvTexture.cpp b/pxr/imaging/hdSt/testenv/testHdStDynamicUvTexture.cpp
index a899def8..d762f769 100644
--- a/pxr/imaging/hdSt/testenv/testHdStDynamicUvTexture.cpp
+++ b/pxr/imaging/hdSt/testenv/testHdStDynamicUvTexture.cpp
@@ -188,7 +188,7 @@ public:
         texture->SetCpuData(nullptr);
     }
 
-    bool IsValid(const HdStDynamicUvTextureObject *texture) {
+    bool IsValid(const HdStDynamicUvTextureObject *texture) override {
         return bool(texture->GetTexture());
     }
 };
diff --git a/pxr/imaging/hdSt/testenv/testHdStInstancing.cpp b/pxr/imaging/hdSt/testenv/testHdStInstancing.cpp
index 72a1cf50..ce5bd800 100644
--- a/pxr/imaging/hdSt/testenv/testHdStInstancing.cpp
+++ b/pxr/imaging/hdSt/testenv/testHdStInstancing.cpp
@@ -28,7 +28,7 @@ public:
     void OffscreenTest() override;
     void Present(uint32_t framebuffer) override;
 
-    void Idle();
+    void Idle() override;
 
 protected:
     void ParseArgs(int argc, char *argv[]) override;
diff --git a/pxr/imaging/hdSt/testenv/testHdStMultipleFvarTopologies.cpp b/pxr/imaging/hdSt/testenv/testHdStMultipleFvarTopologies.cpp
index ae1243e8..fca0bcd8 100644
--- a/pxr/imaging/hdSt/testenv/testHdStMultipleFvarTopologies.cpp
+++ b/pxr/imaging/hdSt/testenv/testHdStMultipleFvarTopologies.cpp
@@ -17,7 +17,7 @@ PXR_NAMESPACE_USING_DIRECTIVE
 
 class My_TestGLDrawing : public HdSt_UnitTestGLDrawing {
 public:
-    My_TestGLDrawing() : _firstRun(true) {
+    My_TestGLDrawing() {
         _reprName = HdReprTokens->hull;
         _refineLevel = 0;
 
@@ -42,7 +42,6 @@ private:
     TfToken _reprName;
     int _refineLevel;
     std::string _outputFilePath;
-    bool _firstRun;
 };
 
 ////////////////////////////////////////////////////////////
diff --git a/pxr/imaging/hdSt/vboMemoryManager.cpp b/pxr/imaging/hdSt/vboMemoryManager.cpp
index 41a2f0fa..042d23d3 100644
--- a/pxr/imaging/hdSt/vboMemoryManager.cpp
+++ b/pxr/imaging/hdSt/vboMemoryManager.cpp
@@ -600,7 +600,7 @@ HdStVBOMemoryManager::_StripedBufferArrayRange::Resize(int numElements)
 
         if (static_cast<size_t>(numElements) > numMaxElements) {
             TF_WARN("Attempting to resize the BAR with 0x%x elements when the "
-                    "max number of elements in the buffer array is 0x%lx. "
+                    "max number of elements in the buffer array is 0x%zx. "
                     "Clamping BAR size to the latter.",
                      numElements, numMaxElements);
 
@@ -655,7 +655,7 @@ HdStVBOMemoryManager::_StripedBufferArrayRange::CopyData(
         bufferSource->GetNumElements() *
         HdDataSizeOfTupleType(bufferSource->GetTupleType());
     if (srcSize > dstSize) {
-        TF_WARN("%s: size %ld is larger than the range (%ld)",
+        TF_WARN("%s: size %zd is larger than the range (%zd)",
                 bufferSource->GetName().GetText(), srcSize, dstSize);
         srcSize = dstSize;
     }
diff --git a/pxr/imaging/hdSt/vboSimpleMemoryManager.cpp b/pxr/imaging/hdSt/vboSimpleMemoryManager.cpp
index 40a2f1fe..ccb51a30 100644
--- a/pxr/imaging/hdSt/vboSimpleMemoryManager.cpp
+++ b/pxr/imaging/hdSt/vboSimpleMemoryManager.cpp
@@ -450,7 +450,7 @@ HdStVBOSimpleMemoryManager::_SimpleBufferArrayRange::CopyData(
         bufferSource->GetNumElements() *
         HdDataSizeOfTupleType(bufferSource->GetTupleType());
     if (srcSize > dstSize) {
-        TF_WARN("%s: size %ld is larger than the range (%ld)",
+        TF_WARN("%s: size %zd is larger than the range (%zd)",
                 bufferSource->GetName().GetText(), srcSize, dstSize);
         srcSize = dstSize;
     }
diff --git a/pxr/imaging/hdx/selectionTracker.cpp b/pxr/imaging/hdx/selectionTracker.cpp
index 063d1648..a4e8b539 100644
--- a/pxr/imaging/hdx/selectionTracker.cpp
+++ b/pxr/imaging/hdx/selectionTracker.cpp
@@ -260,7 +260,7 @@ HdxSelectionTracker::GetSelectionOffsetBuffer(
 
             copyOffset += output.size();
 
-            TF_DEBUG(HDX_SELECTION_SETUP).Msg("Highlight mode %d has %lu "
+            TF_DEBUG(HDX_SELECTION_SETUP).Msg("Highlight mode %d has %zu "
                 "entries\n", mode, output.size());
         }
     }
diff --git a/pxr/imaging/hgiGL/scopedStateHolder.h b/pxr/imaging/hgiGL/scopedStateHolder.h
index e97fa6d5..b0d042a0 100644
--- a/pxr/imaging/hgiGL/scopedStateHolder.h
+++ b/pxr/imaging/hgiGL/scopedStateHolder.h
@@ -58,7 +58,6 @@ private:
     int32_t _restoreStencilReferenceValue[2];
     int32_t _restoreStencilFail[2];
     int32_t _restoreStencilReadMask[2];
-    int32_t _restoreStencilPass[2];
     int32_t _restoreStencilDepthFail[2];
     int32_t _restoreStencilDepthPass[2];
     int32_t _restoreStencilWriteMask[2];
diff --git a/pxr/imaging/hio/OpenEXR/OpenEXRCore/chunk.c b/pxr/imaging/hio/OpenEXR/OpenEXRCore/chunk.c
index cfe80b4c..94cfb1d1 100644
--- a/pxr/imaging/hio/OpenEXR/OpenEXRCore/chunk.c
+++ b/pxr/imaging/hio/OpenEXR/OpenEXRCore/chunk.c
@@ -39,7 +39,7 @@ atomic_compare_exchange_strong (
     uint64_t volatile* object, uint64_t* expected, uint64_t desired)
 {
     uint64_t prev =
-        (uint64_t) InterlockedCompareExchange64 (object, desired, *expected);
+        (uint64_t) InterlockedCompareExchange64 ((volatile int64_t *)object, desired, *expected);
     if (prev == *expected) return 1;
     *expected = prev;
     return 0;
diff --git a/pxr/imaging/hio/OpenEXR/deflate/lib/deflate_decompress.c b/pxr/imaging/hio/OpenEXR/deflate/lib/deflate_decompress.c
index 0074c7a4..1ebeb9c9 100644
--- a/pxr/imaging/hio/OpenEXR/deflate/lib/deflate_decompress.c
+++ b/pxr/imaging/hio/OpenEXR/deflate/lib/deflate_decompress.c
@@ -1081,9 +1081,9 @@ typedef enum libdeflate_result (*decompress_func_t)
 
 #ifdef arch_select_decompress_func
 static enum libdeflate_result
-dispatch_decomp(struct libdeflate_decompressor *d,
-		const void *in, size_t in_nbytes,
-		void *out, size_t out_nbytes_avail,
+dispatch_decomp(struct libdeflate_decompressor * restrict d,
+		const void * restrict in, size_t in_nbytes,
+		void * restrict out, size_t out_nbytes_avail,
 		size_t *actual_in_nbytes_ret, size_t *actual_out_nbytes_ret);
 
 static volatile decompress_func_t decompress_impl = dispatch_decomp;
diff --git a/pxr/imaging/hio/OpenEXR/openexr-c.c b/pxr/imaging/hio/OpenEXR/openexr-c.c
index 6cc2b796..df687072 100644
--- a/pxr/imaging/hio/OpenEXR/openexr-c.c
+++ b/pxr/imaging/hio/OpenEXR/openexr-c.c
@@ -14,6 +14,14 @@
 // defined but not referenced or exported.
 ARCH_PRAGMA_UNUSED_FUNCTION
 
+#if defined(__clang__)
+#pragma clang diagnostic ignored "-Wmacro-redefined"
+#elif defined(__GNUC__)
+#pragma GCC diagnostic ignored "-Wmacro-redefined"
+#elif defined(_MSC_VER)
+#pragma warning(disable: 4005)
+#endif
+
 #include "OpenEXRCoreUnity.h"
 
 #include <ctype.h>
diff --git a/pxr/imaging/hio/fieldTextureData.h b/pxr/imaging/hio/fieldTextureData.h
index c072c051..d8547a6c 100644
--- a/pxr/imaging/hio/fieldTextureData.h
+++ b/pxr/imaging/hio/fieldTextureData.h
@@ -86,7 +86,7 @@ private:
 ///
 /// A base class to make HioFieldTextureData objects, implemented by plugins.
 ///
-class HIO_API HioFieldTextureDataFactoryBase : public TfType::FactoryBase
+class HioFieldTextureDataFactoryBase : public TfType::FactoryBase
 {
 protected:
     friend class HioFieldTextureData;
diff --git a/pxr/imaging/hio/image.h b/pxr/imaging/hio/image.h
index 351c3858..4d645a82 100644
--- a/pxr/imaging/hio/image.h
+++ b/pxr/imaging/hio/image.h
@@ -184,7 +184,7 @@ HioImage::GetMetadata(TfToken const & key, T * value) const
     return true;
 }
 
-class HIO_API HioImageFactoryBase : public TfType::FactoryBase {
+class HioImageFactoryBase : public TfType::FactoryBase {
 public:
     virtual HioImageSharedPtr New() const = 0;
 };
diff --git a/pxr/imaging/hio/stb/stb_image.h b/pxr/imaging/hio/stb/stb_image.h
index ff3b47c7..79b17c1e 100644
--- a/pxr/imaging/hio/stb/stb_image.h
+++ b/pxr/imaging/hio/stb/stb_image.h
@@ -4626,7 +4626,7 @@ static int stbi__check_png_header(stbi__context *s)
    return 1;
 }
 
-typedef struct
+typedef struct tag_stbi__png
 {
    stbi__context *s;
    stbi_uc *idata, *expanded, *out;
diff --git a/pxr/usd/sdf/childrenProxy.h b/pxr/usd/sdf/childrenProxy.h
index f5155285..c28d8f03 100644
--- a/pxr/usd/sdf/childrenProxy.h
+++ b/pxr/usd/sdf/childrenProxy.h
@@ -52,13 +52,6 @@ private:
             return *_pos;
         }
 
-        template <class U>
-        _ValueProxy& operator=(const U& x)
-        {
-            _owner->_Set(*_pos, x);
-            return *this;
-        }
-
         bool operator==(const mapped_type& other) const
         {
             return *_pos == other;
diff --git a/pxr/usd/sdf/predicateExpression.cpp b/pxr/usd/sdf/predicateExpression.cpp
index a96cbbd1..5156c21b 100644
--- a/pxr/usd/sdf/predicateExpression.cpp
+++ b/pxr/usd/sdf/predicateExpression.cpp
@@ -160,6 +160,8 @@ SdfPredicateExpression::GetText() const
 
     std::vector<Op> opStack;
 
+    ARCH_PRAGMA_PUSH
+    ARCH_PRAGMA_UNUSED_LAMBDA_CAPTURE
     auto printLogic = [&opName, &opStack, &result](
         std::vector<std::pair<Op, int>> const &stack) {
 
@@ -189,6 +191,7 @@ SdfPredicateExpression::GetText() const
             result += ')';
         }                
     };
+    ARCH_PRAGMA_POP
 
     auto printCall = [&result](FnCall const &call) {
         result += call.funcName;
diff --git a/pxr/usd/sdf/textFileFormat.cpp b/pxr/usd/sdf/textFileFormat.cpp
index f9c24625..c70b6001 100644
--- a/pxr/usd/sdf/textFileFormat.cpp
+++ b/pxr/usd/sdf/textFileFormat.cpp
@@ -169,7 +169,7 @@ SdfTextFileFormat::_ReadFromAsset(
     const size_t toMB = 1048576;
 
     if (fileSizeWarning > 0 && asset->GetSize() > (fileSizeWarning * toMB)) {
-        TF_WARN("Performance warning: reading %lu MB text-based layer <%s>.",
+        TF_WARN("Performance warning: reading %zu MB text-based layer <%s>.",
                 asset->GetSize() / toMB,
                 resolvedPath.c_str());
     }
diff --git a/pxr/usd/sdf/wrapArrayAssetPath.cpp b/pxr/usd/sdf/wrapArrayAssetPath.cpp
index a73602f8..62990cc6 100644
--- a/pxr/usd/sdf/wrapArrayAssetPath.cpp
+++ b/pxr/usd/sdf/wrapArrayAssetPath.cpp
@@ -32,3 +32,12 @@ void wrapArrayAssetPath() {
     VtWrapArray<VtArray<SdfAssetPath> >();
     VtValueFromPythonLValue<VtArray<SdfAssetPath> >();
 }
+
+#if defined(ARCH_OS_WINDOWS)
+PXR_NAMESPACE_OPEN_SCOPE
+// On Windows, the VtArray functions are not being defined in the translation
+// unit and are left as undefined symbols during linking. Forcing the
+// instantiation here to force the symbols to be created for linking.
+template class VtArray<SdfAssetPath>;
+PXR_NAMESPACE_CLOSE_SCOPE
+#endif // defined(ARCH_OS_WINDOWS)
diff --git a/pxr/usd/usd/crateFile.cpp b/pxr/usd/usd/crateFile.cpp
index f3a3f27b..48ec2990 100644
--- a/pxr/usd/usd/crateFile.cpp
+++ b/pxr/usd/usd/crateFile.cpp
@@ -1803,6 +1803,8 @@ _WritePossiblyCompressedArray(
         return _WriteUncompressedArray(w, array, ver);
     }
 
+    ARCH_PRAGMA_PUSH
+    ARCH_PRAGMA_INT_FLOAT_CONVERSION
     // Check to see if all the floats are exactly represented as integers.
     auto isIntegral = [](T fp) {
         constexpr int32_t max = std::numeric_limits<int32_t>::max();
@@ -1810,6 +1812,7 @@ _WritePossiblyCompressedArray(
         return min <= fp && fp <= max &&
             static_cast<T>(static_cast<int32_t>(fp)) == fp;
     };    
+    ARCH_PRAGMA_POP
     if (std::all_of(array.cdata(), array.cdata() + array.size(), isIntegral)) {
         // Encode as integers.
         auto result = ValueRepForArray<T>(w.Tell());
@@ -3593,7 +3596,7 @@ CrateFile::_ReadTokens(Reader reader)
     }
     wd.Wait();
     if (i != numTokens) {
-        TF_RUNTIME_ERROR("Crate file claims %zu tokens, found %zu",
+        TF_RUNTIME_ERROR("Crate file claims %llu tokens, found %zu",
                          numTokens, i);
     }
 
diff --git a/pxr/usd/usd/prim.h b/pxr/usd/usd/prim.h
index 4b32a463..5db1bbeb 100644
--- a/pxr/usd/usd/prim.h
+++ b/pxr/usd/usd/prim.h
@@ -2196,7 +2196,7 @@ private:
     friend class UsdSchemaBase;
     friend class UsdAPISchemaBase;
     friend class UsdStage;
-    friend class Usd_StageImplAccess;
+    friend struct Usd_StageImplAccess;
     friend class UsdPrimRange;
     friend class Usd_PrimData;
     friend class Usd_PrimFlagsPredicate;
diff --git a/pxr/usd/usd/primDefinition.cpp b/pxr/usd/usd/primDefinition.cpp
index 6432d389..62d36001 100644
--- a/pxr/usd/usd/primDefinition.cpp
+++ b/pxr/usd/usd/primDefinition.cpp
@@ -380,8 +380,8 @@ UsdPrimDefinition::_FindOrCreatePropertySpecForComposition(
     // we create a new layer for this prim definition to write its composed
     // properties.
     if (_composedPropertyLayer) {
-        if (destProp = _composedPropertyLayer->GetPropertyAtPath(
-                primPath.AppendProperty(propName))) {
+        if ((destProp = _composedPropertyLayer->GetPropertyAtPath(
+                primPath.AppendProperty(propName)))) {
             return destProp;
         }
     } else {
diff --git a/pxr/usd/usd/stage.cpp b/pxr/usd/usd/stage.cpp
index 08c21d6e..dd18006e 100644
--- a/pxr/usd/usd/stage.cpp
+++ b/pxr/usd/usd/stage.cpp
@@ -5416,7 +5416,7 @@ _GenerateFlattenedPrototypePath(const std::vector<UsdPrim>& prototypes)
     size_t primPrototypeId = 1;
 
     const auto generatePathName = [&primPrototypeId]() {
-        return SdfPath(TfStringPrintf("/Flattened_Prototype_%lu", 
+        return SdfPath(TfStringPrintf("/Flattened_Prototype_%zu",
                                       primPrototypeId++));
     };
 
diff --git a/pxr/usd/usd/testenv/testUsdResolveTarget.cpp b/pxr/usd/usd/testenv/testUsdResolveTarget.cpp
index aeae8ccc..9c476b44 100644
--- a/pxr/usd/usd/testenv/testUsdResolveTarget.cpp
+++ b/pxr/usd/usd/testenv/testUsdResolveTarget.cpp
@@ -240,8 +240,8 @@ _MakeAndVerifyQueries(
         attr.GetPath() << " **" << std::endl;
 
     TF_VERIFY(expectedValues.size() == resolveTargets.size(), 
-        "Number or resolve targets %lu doesn't match the number of expected "
-        "values %lu.",
+        "Number or resolve targets %zu doesn't match the number of expected "
+        "values %zu.",
         resolveTargets.size(), expectedValues.size());
 
     for (size_t i = 0; i < resolveTargets.size(); ++i) {
diff --git a/pxr/usd/usdGeom/primvar.h b/pxr/usd/usdGeom/primvar.h
index 05a3c983..a59f5651 100644
--- a/pxr/usd/usdGeom/primvar.h
+++ b/pxr/usd/usdGeom/primvar.h
@@ -864,7 +864,7 @@ UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarType> &authored,
 
     if (!invalidIndexPositions.empty() && errString) {
         *errString = TfStringPrintf(
-            "Found %ld invalid indices into authored array of size %ld with" 
+            "Found %zu invalid indices into authored array of size %zu with"
             " element size of %i:", 
             invalidIndexPositions.size(), 
             authored.size(), elementSize);
@@ -877,7 +877,7 @@ UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarType> &authored,
             int authoredStartIndex = invalidIndex * elementSize;
 
             *errString += TfStringPrintf(
-            "\n\t Invalid index %i at position %ld refers to %s of the"
+            "\n\t Invalid index %i at position %zu refers to %s of the"
             " authored array, which is out of bounds", 
             invalidIndex,
             invalidIndexPositions[i],
diff --git a/pxr/usd/usdGeom/subset.cpp b/pxr/usd/usdGeom/subset.cpp
index 1885a9e1..d8be0af7 100644
--- a/pxr/usd/usdGeom/subset.cpp
+++ b/pxr/usd/usdGeom/subset.cpp
@@ -822,7 +822,7 @@ UsdGeomSubset::ValidateSubsets(
             valid = false;
             if (reason) {
                 *reason += TfStringPrintf("Number of unique indices at time %s "
-                    "does not match the element count %ld.", 
+                    "does not match the element count %zu.",
                     TfStringify(t).c_str(), elementCount);
             }
         }
@@ -833,7 +833,7 @@ UsdGeomSubset::ValidateSubsets(
             valid = false;
             if (reason) {
                 *reason += TfStringPrintf("Found one or more indices that are "
-                    "greater than the element count %ld at time %s.",
+                    "greater than the element count %zd at time %s.",
                     elementCount, TfStringify(t).c_str());
             }
         }
@@ -978,7 +978,7 @@ UsdGeomSubset::ValidateFamily(
                 valid = false;
                 if (reason) {
                     *reason += TfStringPrintf("Number of unique indices at time %s "
-                        "does not match the element count %ld.",
+                        "does not match the element count %zd.",
                         TfStringify(t).c_str(), elementCount);
                 }
             }
@@ -1049,7 +1049,7 @@ UsdGeomSubset::ValidateFamily(
                                 valid = false;
                                 if (reason) {
                                     *reason += TfStringPrintf("Found one or more indices that are "
-                                        "greater than the curve vertex count %lu at time %s.",
+                                        "greater than the curve vertex count %zu at time %s.",
                                         curveVertexCounts.size(), TfStringify(t).c_str());
                                 }
                             } else if (segment[1] >= segmentCounts[curveIndex]) {
@@ -1078,7 +1078,7 @@ UsdGeomSubset::ValidateFamily(
                     valid = false;
                     if (reason) {
                         *reason += TfStringPrintf("Number of unique indices at time %s "
-                            "does not match the element count %ld.",
+                            "does not match the element count %zd.",
                             TfStringify(t).c_str(), elementCount);
                     }
                 }
@@ -1101,7 +1101,7 @@ UsdGeomSubset::ValidateFamily(
                 valid = false;
                 if (reason) {
                     *reason += TfStringPrintf("Found one or more indices that are "
-                        "greater than the element count %ld at time %s.",
+                        "greater than the element count %zd at time %s.",
                         elementCount, TfStringify(t).c_str());
                 }
             }
diff --git a/pxr/usd/usdUtils/assetLocalizationDelegate.h b/pxr/usd/usdUtils/assetLocalizationDelegate.h
index 4a36dcb4..531636bf 100644
--- a/pxr/usd/usdUtils/assetLocalizationDelegate.h
+++ b/pxr/usd/usdUtils/assetLocalizationDelegate.h
@@ -273,7 +273,7 @@ public:
 
     virtual std::vector<std::string> ProcessPayloads(
         const SdfLayerRefPtr &layer,
-        const SdfPrimSpecHandle &primSpec);
+        const SdfPrimSpecHandle &primSpec) override;
 
     virtual std::vector<std::string> ProcessReferences(
         const SdfLayerRefPtr &layer,
diff --git a/pxr/usdImaging/usdImaging/cylinderLightAdapter.h b/pxr/usdImaging/usdImaging/cylinderLightAdapter.h
index 74dbda58..91d78ce6 100644
--- a/pxr/usdImaging/usdImaging/cylinderLightAdapter.h
+++ b/pxr/usdImaging/usdImaging/cylinderLightAdapter.h
@@ -49,10 +49,10 @@ public:
     USDIMAGING_API
     virtual SdfPath Populate(UsdPrim const& prim,
                      UsdImagingIndexProxy* index,
-                     UsdImagingInstancerContext const* instancerContext = NULL);
+                     UsdImagingInstancerContext const* instancerContext = NULL) override;
 
     USDIMAGING_API
-    virtual bool IsSupported(UsdImagingIndexProxy const* index) const;
+    virtual bool IsSupported(UsdImagingIndexProxy const* index) const override;
     
 protected:
     virtual void _RemovePrim(SdfPath const& cachePath,
diff --git a/pxr/usdImaging/usdImaging/dataSourceMaterial.cpp b/pxr/usdImaging/usdImaging/dataSourceMaterial.cpp
index 9b52e477..e7e83c89 100644
--- a/pxr/usdImaging/usdImaging/dataSourceMaterial.cpp
+++ b/pxr/usdImaging/usdImaging/dataSourceMaterial.cpp
@@ -281,15 +281,13 @@ public:
 private:
     _UsdImagingDataSourceShadingNodeInputs(
         UsdShadeShader shaderNode,
-        const UsdImagingDataSourceStageGlobals &stageGlobals,
+        ARCH_UNUSED_ARG const UsdImagingDataSourceStageGlobals &stageGlobals,
         const SdfPath &materialPrefix)
     : _shaderNode(shaderNode)
-    , _stageGlobals(stageGlobals)
     , _materialPrefix(materialPrefix)
     {}
 
     UsdShadeShader _shaderNode;
-    const UsdImagingDataSourceStageGlobals &_stageGlobals;
     const SdfPath _materialPrefix;
 };
 
diff --git a/pxr/usdImaging/usdImaging/dataSourcePrim.cpp b/pxr/usdImaging/usdImaging/dataSourcePrim.cpp
index 53e46275..fcac1b45 100644
--- a/pxr/usdImaging/usdImaging/dataSourcePrim.cpp
+++ b/pxr/usdImaging/usdImaging/dataSourcePrim.cpp
@@ -91,9 +91,8 @@ UsdImagingDataSourceVisibility::Get(const TfToken &name)
 
 UsdImagingDataSourcePurpose::UsdImagingDataSourcePurpose(
         const UsdAttributeQuery &purposeQuery,
-        const UsdImagingDataSourceStageGlobals &stageGlobals)
+        ARCH_UNUSED_ARG const UsdImagingDataSourceStageGlobals &stageGlobals)
     : _purposeQuery(purposeQuery)
-    , _stageGlobals(stageGlobals)
 {
 }
 
@@ -311,9 +310,8 @@ UsdImagingDataSourceExtentsHint::Get(const TfToken &name)
 
 UsdImagingDataSourceXformResetXformStack::UsdImagingDataSourceXformResetXformStack(
         const UsdGeomXformable::XformQuery &xformQuery,
-        const UsdImagingDataSourceStageGlobals &stageGlobals)
+        ARCH_UNUSED_ARG const UsdImagingDataSourceStageGlobals &stageGlobals)
     : _xformQuery(xformQuery)
-    , _stageGlobals(stageGlobals)
 {
 }
 
diff --git a/pxr/usdImaging/usdImaging/dataSourcePrim.h b/pxr/usdImaging/usdImaging/dataSourcePrim.h
index a0521034..6ddbbffc 100644
--- a/pxr/usdImaging/usdImaging/dataSourcePrim.h
+++ b/pxr/usdImaging/usdImaging/dataSourcePrim.h
@@ -94,7 +94,6 @@ private:
 
 private:
     UsdAttributeQuery _purposeQuery;
-    const UsdImagingDataSourceStageGlobals &_stageGlobals;
 };
 
 HD_DECLARE_DATASOURCE_HANDLES(UsdImagingDataSourcePurpose);
@@ -272,7 +271,6 @@ private:
 
 private:
     UsdGeomXformable::XformQuery _xformQuery;
-    const UsdImagingDataSourceStageGlobals &_stageGlobals;
 };
 
 HD_DECLARE_DATASOURCE_HANDLES(UsdImagingDataSourceXformResetXformStack);
diff --git a/pxr/usdImaging/usdImaging/dataSourceRelationship.cpp b/pxr/usdImaging/usdImaging/dataSourceRelationship.cpp
index 5a88d68b..e6e885fe 100644
--- a/pxr/usdImaging/usdImaging/dataSourceRelationship.cpp
+++ b/pxr/usdImaging/usdImaging/dataSourceRelationship.cpp
@@ -12,7 +12,6 @@ UsdImagingDataSourceRelationship::UsdImagingDataSourceRelationship(
         const UsdRelationship &usdRel,
         const UsdImagingDataSourceStageGlobals &stageGlobals)
 : _usdRel(usdRel)
-, _stageGlobals(stageGlobals)
 {}
 
 VtValue
diff --git a/pxr/usdImaging/usdImaging/dataSourceRelationship.h b/pxr/usdImaging/usdImaging/dataSourceRelationship.h
index dc2c0f00..c6cdc675 100644
--- a/pxr/usdImaging/usdImaging/dataSourceRelationship.h
+++ b/pxr/usdImaging/usdImaging/dataSourceRelationship.h
@@ -55,7 +55,6 @@ private:
 
 private:
     UsdRelationship _usdRel;
-    const UsdImagingDataSourceStageGlobals & _stageGlobals;
 };
 
 HD_DECLARE_DATASOURCE_HANDLES(UsdImagingDataSourceRelationship);
diff --git a/pxr/usdImaging/usdImaging/dataSourceRenderPrims.cpp b/pxr/usdImaging/usdImaging/dataSourceRenderPrims.cpp
index 91caa911..b39ec6a1 100644
--- a/pxr/usdImaging/usdImaging/dataSourceRenderPrims.cpp
+++ b/pxr/usdImaging/usdImaging/dataSourceRenderPrims.cpp
@@ -123,16 +123,14 @@ private:
     _DataSourceRenderPass(
             const SdfPath &sceneIndexPath,
             UsdRenderPass usdRenderPass,
-            const UsdImagingDataSourceStageGlobals &stageGlobals)
+            ARCH_UNUSED_ARG const UsdImagingDataSourceStageGlobals &stageGlobals)
         : _sceneIndexPath(sceneIndexPath)
         , _usdRenderPass(usdRenderPass)
-        , _stageGlobals(stageGlobals)
     {}
 
 private:
     const SdfPath _sceneIndexPath;
     UsdRenderPass _usdRenderPass;
-    const UsdImagingDataSourceStageGlobals & _stageGlobals;
 };
 
 HD_DECLARE_DATASOURCE_HANDLES(_DataSourceRenderPass);
diff --git a/pxr/usdImaging/usdImaging/dataSourceVolume.cpp b/pxr/usdImaging/usdImaging/dataSourceVolume.cpp
index bf077b17..b33752d5 100644
--- a/pxr/usdImaging/usdImaging/dataSourceVolume.cpp
+++ b/pxr/usdImaging/usdImaging/dataSourceVolume.cpp
@@ -16,9 +16,8 @@ PXR_NAMESPACE_OPEN_SCOPE
 UsdImagingDataSourceVolumeFieldBindings
 ::UsdImagingDataSourceVolumeFieldBindings(
         UsdVolVolume usdVolume,
-        const UsdImagingDataSourceStageGlobals &stageGlobals)
+        ARCH_UNUSED_ARG const UsdImagingDataSourceStageGlobals &stageGlobals)
     : _usdVolume(usdVolume)
-    , _stageGlobals(stageGlobals)
 {
 }
 
diff --git a/pxr/usdImaging/usdImaging/dataSourceVolume.h b/pxr/usdImaging/usdImaging/dataSourceVolume.h
index 646f02d2..1fdd4608 100644
--- a/pxr/usdImaging/usdImaging/dataSourceVolume.h
+++ b/pxr/usdImaging/usdImaging/dataSourceVolume.h
@@ -38,7 +38,6 @@ private:
 
 private:
     UsdVolVolume _usdVolume;
-    const UsdImagingDataSourceStageGlobals &_stageGlobals;
 };
 
 HD_DECLARE_DATASOURCE_HANDLES(UsdImagingDataSourceVolumeFieldBindings);
diff --git a/pxr/usdImaging/usdImaging/delegate.cpp b/pxr/usdImaging/usdImaging/delegate.cpp
index 989593c8..6bfb3c39 100644
--- a/pxr/usdImaging/usdImaging/delegate.cpp
+++ b/pxr/usdImaging/usdImaging/delegate.cpp
@@ -981,7 +981,7 @@ UsdImagingDelegate::_GatherDependencies(
     if (it != cache.end()) {
         TF_DEBUG(USDIMAGING_CHANGES).Msg(
             "[_GatherDependencies] Found entry in flattened cache for %s with "
-            "%lu paths\n", subtree.GetText(), it->second.size());
+            "%zu paths\n", subtree.GetText(), it->second.size());
 
         *affectedCachePaths = it->second;
         return;
diff --git a/pxr/usdImaging/usdImaging/drawModeStandin.cpp b/pxr/usdImaging/usdImaging/drawModeStandin.cpp
index bb49b46f..cfb8476a 100644
--- a/pxr/usdImaging/usdImaging/drawModeStandin.cpp
+++ b/pxr/usdImaging/usdImaging/drawModeStandin.cpp
@@ -1403,6 +1403,7 @@ _CardsDataCache::_CardsData::_ComputePoints(const _SchemaValues &values)
             { x, 1, 0 } };
 
         static const GfVec3f one(1.0f);
+        (void)one;
 
         // For each pair of opposite faces.
         for (size_t i = 0; i < 3; i++) {
diff --git a/pxr/usdImaging/usdImaging/flattenedDirectMaterialBindingsDataSourceProvider.h b/pxr/usdImaging/usdImaging/flattenedDirectMaterialBindingsDataSourceProvider.h
index 2bd34238..e722296b 100644
--- a/pxr/usdImaging/usdImaging/flattenedDirectMaterialBindingsDataSourceProvider.h
+++ b/pxr/usdImaging/usdImaging/flattenedDirectMaterialBindingsDataSourceProvider.h
@@ -7,7 +7,7 @@
 #ifndef PXR_USD_IMAGING_USD_IMAGING_FLATTENED_MATERIAL_BINDINGS_DATA_SOURCE_PROVIDER_H
 #define PXR_USD_IMAGING_USD_IMAGING_FLATTENED_MATERIAL_BINDINGS_DATA_SOURCE_PROVIDER_H
 
-#include "pxr/imaging/hd/api.h"
+#include "pxr/usdImaging/usdImaging/api.h"
 
 #include "pxr/imaging/hd/flattenedDataSourceProvider.h"
 
@@ -16,11 +16,11 @@ PXR_NAMESPACE_OPEN_SCOPE
 class UsdImagingFlattenedDirectMaterialBindingsDataSourceProvider
     : public HdFlattenedDataSourceProvider
 {
-    HD_API
+    USDIMAGING_API
     HdContainerDataSourceHandle GetFlattenedDataSource(
         const Context&) const override;
 
-    HD_API
+    USDIMAGING_API
     void ComputeDirtyLocatorsForDescendants(
         HdDataSourceLocatorSet * locators) const override;
 };
diff --git a/pxr/usdImaging/usdImaging/gprimAdapter.cpp b/pxr/usdImaging/usdImaging/gprimAdapter.cpp
index dabace37..9fcc3836 100644
--- a/pxr/usdImaging/usdImaging/gprimAdapter.cpp
+++ b/pxr/usdImaging/usdImaging/gprimAdapter.cpp
@@ -865,7 +865,7 @@ UsdImagingGprimAdapter::GetColor(UsdPrim const& prim,
 
                     if (colorInterp == UsdGeomTokens->constant &&
                         result.size() > 1) {
-                        TF_WARN("Prim %s has %lu element(s) for %s even "
+                        TF_WARN("Prim %s has %zu element(s) for %s even "
                                 "though it is marked constant.",
                                 prim.GetPath().GetText(), result.size(),
                                 primvar.GetName().GetText());
@@ -878,7 +878,7 @@ UsdImagingGprimAdapter::GetColor(UsdPrim const& prim,
 
                 if (colorInterp == UsdGeomTokens->constant &&
                     result.size() > 1) {
-                    TF_WARN("Prim %s has %lu element(s) for %s even "
+                    TF_WARN("Prim %s has %zu element(s) for %s even "
                             "though it is marked constant.",
                             prim.GetPath().GetText(), result.size(),
                             primvar.GetName().GetText());
@@ -978,7 +978,7 @@ UsdImagingGprimAdapter::GetOpacity(UsdPrim const& prim,
 
                     if (opacityInterp == UsdGeomTokens->constant &&
                         result.size() > 1) {
-                        TF_WARN("Prim %s has %lu element(s) for %s even "
+                        TF_WARN("Prim %s has %zu element(s) for %s even "
                                 "though it is marked constant.",
                                 prim.GetPath().GetText(), result.size(),
                                 primvar.GetName().GetText());
@@ -991,7 +991,7 @@ UsdImagingGprimAdapter::GetOpacity(UsdPrim const& prim,
 
                 if (opacityInterp == UsdGeomTokens->constant &&
                     result.size() > 1) {
-                    TF_WARN("Prim %s has %lu element(s) for %s even "
+                    TF_WARN("Prim %s has %zu element(s) for %s even "
                             "though it is marked constant.",
                             prim.GetPath().GetText(), result.size(),
                             primvar.GetName().GetText());
diff --git a/pxr/usdImaging/usdImaging/indexProxy.cpp b/pxr/usdImaging/usdImaging/indexProxy.cpp
index 098da95b..e2fc47b3 100644
--- a/pxr/usdImaging/usdImaging/indexProxy.cpp
+++ b/pxr/usdImaging/usdImaging/indexProxy.cpp
@@ -40,10 +40,13 @@ UsdImagingIndexProxy::_AddHdPrimInfo(SdfPath const &cachePath,
         }
     }
 
+    ARCH_PRAGMA_PUSH
+    ARCH_PRAGMA_POTENTIALLY_EVALUATED_EXPRESSION
     TF_DEBUG(USDIMAGING_CHANGES).Msg(
         "[Add HdPrim Info] <%s> adapter=%s\n",
         cachePath.GetText(),
         TfType::GetCanonicalTypeName(typeid(*(adapterToInsert.get()))).c_str());
+    ARCH_PRAGMA_POP
 
     // Currently, we don't support more than one adapter dependency per usd
     // prim, but we could relax this restriction if it's useful.
diff --git a/pxr/usdImaging/usdImaging/instanceAdapter.cpp b/pxr/usdImaging/usdImaging/instanceAdapter.cpp
index 091678c4..0acf286f 100644
--- a/pxr/usdImaging/usdImaging/instanceAdapter.cpp
+++ b/pxr/usdImaging/usdImaging/instanceAdapter.cpp
@@ -344,6 +344,8 @@ UsdImagingInstanceAdapter::_Populate(UsdPrim const& prim,
                 protoPath = newProtoPath;
             }
 
+            ARCH_PRAGMA_PUSH
+            ARCH_PRAGMA_POTENTIALLY_EVALUATED_EXPRESSION
             TF_DEBUG(USDIMAGING_INSTANCER).Msg(
                 "[Add Instance NI] <%s>  %s (%s), adapter = %s\n",
                 instancerPath.GetText(), protoPath.GetText(),
@@ -351,6 +353,7 @@ UsdImagingInstanceAdapter::_Populate(UsdPrim const& prim,
                 primAdapter ?
                     TfType::GetCanonicalTypeName(typeid(*primAdapter)).c_str() :
                     "none");
+            ARCH_PRAGMA_POP
         }
     }
 
diff --git a/pxr/usdImaging/usdImaging/pointInstancerAdapter.cpp b/pxr/usdImaging/usdImaging/pointInstancerAdapter.cpp
index 0198e450..e63ce827 100644
--- a/pxr/usdImaging/usdImaging/pointInstancerAdapter.cpp
+++ b/pxr/usdImaging/usdImaging/pointInstancerAdapter.cpp
@@ -489,7 +489,7 @@ UsdImagingPointInstancerAdapter::_PopulatePrototype(
     }
 
     TF_DEBUG(USDIMAGING_POINT_INSTANCER_PROTO_CREATED).Msg(
-        "Prototype[%d]: <%s>, primCount: %lu, instantiatedPrimCount: %lu\n",
+        "Prototype[%d]: <%s>, primCount: %zu, instantiatedPrimCount: %zu\n",
         protoIndex,
         protoRootPrim.GetPath().GetText(),
         primCount,
diff --git a/pxr/usdImaging/usdImaging/portalLightAdapter.h b/pxr/usdImaging/usdImaging/portalLightAdapter.h
index 9472a40b..4a3a68c3 100644
--- a/pxr/usdImaging/usdImaging/portalLightAdapter.h
+++ b/pxr/usdImaging/usdImaging/portalLightAdapter.h
@@ -36,10 +36,10 @@ public:
     USDIMAGING_API
     virtual SdfPath Populate(UsdPrim const& prim,
                      UsdImagingIndexProxy* index,
-                     UsdImagingInstancerContext const* instancerContext = NULL);
+                     UsdImagingInstancerContext const* instancerContext = NULL) override;
 
     USDIMAGING_API
-    virtual bool IsSupported(UsdImagingIndexProxy const* index) const;
+    virtual bool IsSupported(UsdImagingIndexProxy const* index) const override;
 
     // ---------------------------------------------------------------------- //
     /// \name Scene Index Support
diff --git a/pxr/usdImaging/usdImaging/testenv/testUsdImagingDelegate.cpp b/pxr/usdImaging/usdImaging/testenv/testUsdImagingDelegate.cpp
index ef5dc180..b3a16c20 100644
--- a/pxr/usdImaging/usdImaging/testenv/testUsdImagingDelegate.cpp
+++ b/pxr/usdImaging/usdImaging/testenv/testUsdImagingDelegate.cpp
@@ -68,10 +68,10 @@ VaryingTest()
     driver.Draw();
 
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->extent) == 2,
-                "Found %lu cache misses", 
+                "Found %zu cache misses",
                 perfLog.GetCacheMisses(HdTokens->extent));
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->points) == 2, 
-                "Found %lu cache misses", 
+                "Found %zu cache misses",
                 perfLog.GetCacheMisses(HdTokens->points));
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->topology) == 1);
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->transform) == 2);
@@ -97,10 +97,10 @@ VaryingTest()
     driver2.Draw();
 
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->extent) == 2,
-                "Found %lu cache misses", 
+                "Found %zu cache misses",
                 perfLog.GetCacheMisses(HdTokens->extent));
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->points) == 2, 
-                "Found %lu cache misses", 
+                "Found %zu cache misses",
                 perfLog.GetCacheMisses(HdTokens->points));
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->topology) == 1);
     TF_VERIFY(perfLog.GetCacheMisses(HdTokens->transform) == 2);
diff --git a/pxr/usdImaging/usdImaging/testenv/testUsdImagingNestedInstancingCategories.cpp b/pxr/usdImaging/usdImaging/testenv/testUsdImagingNestedInstancingCategories.cpp
index 4d483cfa..918a3aa5 100644
--- a/pxr/usdImaging/usdImaging/testenv/testUsdImagingNestedInstancingCategories.cpp
+++ b/pxr/usdImaging/usdImaging/testenv/testUsdImagingNestedInstancingCategories.cpp
@@ -50,7 +50,7 @@ struct Instance {
                 }
             }
             msg += TfStringPrintf(
-                "\nCategories mismatch:\n  L: (%lu) [%s]\n  R: (%lu) [%s]\n",
+                "\nCategories mismatch:\n  L: (%zu) [%s]\n  R: (%zu) [%s]\n",
                 lhsCats.size(), strL.c_str(), rhsCats.size(), strR.c_str());
             result = false;
         }
@@ -103,13 +103,13 @@ TestNestedInstancingCategories()
     for (const int& instanceIndex : instanceIndices) {
         if (instanceIndex >= int(instanceCategories.size())) {
             TF_CODING_ERROR("InstanceIndex %i is out of range. "
-                "GetInstanceCategories gave only %lu category lists", 
+                "GetInstanceCategories gave only %zu category lists",
                 instanceIndex, instanceCategories.size());
             break;
         }
         if (instanceIndex >= int(instancePaths.size())) {
             TF_CODING_ERROR("InstanceIndex %i is out of range. "
-                "GetScenePrimPaths gave only %lu paths",
+                "GetScenePrimPaths gave only %zu paths",
                 instanceIndex, instancePaths.size());
             break;
         }
diff --git a/pxr/usdImaging/usdImaging/tetMeshAdapter.h b/pxr/usdImaging/usdImaging/tetMeshAdapter.h
index 00cbe587..a503cf58 100644
--- a/pxr/usdImaging/usdImaging/tetMeshAdapter.h
+++ b/pxr/usdImaging/usdImaging/tetMeshAdapter.h
@@ -81,7 +81,7 @@ public:
                                   SdfPath const& cachePath,
                                   HdDirtyBits* timeVaryingBits,
                                   UsdImagingInstancerContext const* 
-                                      instancerContext = nullptr) const;
+                                      instancerContext = nullptr) const override;
 
     // ---------------------------------------------------------------------- //
     /// \name Change Processing
diff --git a/pxr/usdImaging/usdVolImaging/field3dAssetAdapter.h b/pxr/usdImaging/usdVolImaging/field3dAssetAdapter.h
index eb70fcc7..d48df315 100644
--- a/pxr/usdImaging/usdVolImaging/field3dAssetAdapter.h
+++ b/pxr/usdImaging/usdVolImaging/field3dAssetAdapter.h
@@ -50,7 +50,7 @@ public:
             TfToken const& subprim,
             const UsdImagingDataSourceStageGlobals &stageGlobals) override;
 
-    USDIMAGING_API
+    USDVOLIMAGING_API
     HdDataSourceLocatorSet InvalidateImagingSubprim(
             UsdPrim const& prim,
             TfToken const& subprim,
diff --git a/pxr/usdImaging/usdVolImaging/openvdbAssetAdapter.h b/pxr/usdImaging/usdVolImaging/openvdbAssetAdapter.h
index 5aae588b..ae4697a9 100644
--- a/pxr/usdImaging/usdVolImaging/openvdbAssetAdapter.h
+++ b/pxr/usdImaging/usdVolImaging/openvdbAssetAdapter.h
@@ -50,7 +50,7 @@ public:
             TfToken const& subprim,
             const UsdImagingDataSourceStageGlobals &stageGlobals) override;
 
-    USDIMAGING_API
+    USDVOLIMAGING_API
     HdDataSourceLocatorSet InvalidateImagingSubprim(
             UsdPrim const& prim,
             TfToken const& subprim,
-- 
2.47.1.windows.1

