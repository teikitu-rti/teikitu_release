name: configure__github_runner_image_runtime
on:
  # workflow_call is a required field of the "on" property,
  # when intending to use the workflow as a reusable workflow
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      cmake_command:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: true
jobs:
  configure:
    runs-on: ${{ inputs.os }}
    steps:
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Troubleshooting
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Checkout
      - uses: actions/checkout@v4
        with:
          lfs: true
          token: ${{ secrets.GH_TOKEN }}

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Development tools - LLVM 19.1.5
      - name: Development tools - LLVM 19.1.5
        if: runner.os == 'Linux'
        shell: bash
        working-directory: build_scripts/runner
        run: |
            sudo apt-get install -y wget
            wget -q --no-check-certificate https://apt.llvm.org/llvm.sh
            chmod +x ./llvm.sh
            sudo ./llvm.sh 19 all
            rm llvm.sh

      - name: LLVM script adds repositories to the sources list, so we need to update the package list
        if: runner.os == 'Linux'
        shell: bash
        working-directory: build_scripts/runner
        run: |
            sudo apt-get update -y
            sudo apt-get upgrade

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # APT Installs and Upgrades
      - name: APT Installs and Upgrades
        if: runner.os == 'Linux'
        shell: bash
        working-directory: build_scripts/runner
        run: |
            sudo apt-get install -y build-essential
            sudo apt-get install -y unzip
            sudo apt-get install -y jq
            sudo apt-get install -y libssl-dev
            sudo apt-get install -y lsb-release
            sudo apt-get install -y gpg
            sudo apt-get install -y gnupg
            sudo apt-get install -y software-properties-common
            sudo apt-get install -y libtool
            sudo apt-get install -y autoconf
            sudo apt-get install -y python3
            sudo apt-get install -y python3-pip
            sudo apt-get install -y libpython3-dev
            pip3 install Jinja2
            pip3 install PyOpenGL
            pip3 install pyside6
            sudo apt-get install -y doxygen
            sudo apt-get install -y xorg-dev
            sudo apt-get install -y libglu1-mesa-dev
            sudo apt-get install -y flex
            sudo apt-get install -y bison
            sudo apt-get install -y libedit-dev
            sudo apt-get install -y openjdk-21-jdk
            sudo apt-get install -y git
            sudo apt-get install -y git-lfs
            sudo apt-get install -y gh
            sudo apt-get install -y ninja-build
            sudo apt-get install -y nodejs
            sudo apt-get install -y libcurl4-openssl-dev
            sudo apt-get install -y libc6
            sudo apt-get update -y
            sudo apt-get upgrade
            /usr/bin/ldd --version

      - name: Choco Installs and PIP3
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: build_scripts/runner/windows
        env:
          GIT_SSH: "C:/Program Files/OpenSSH-Win64/ssh.exe"
        run: |
            sc.exe delete ssh-agent
            choco install -y openssh -params '"/SSHAgentFeature"' --no-progress -y
            choco install -y ninja --no-progress
            choco install -y llvm --version 19.1.5 --no-progress
            choco config set llvm_dir "C:\Program Files\LLVM\bin"
            choco install -y winflexbison3 --no-progress
            choco install -y git --no-progress
            choco install -y git-lfs --no-progress
            choco install -y wget --no-progress
            python.exe -m pip install --upgrade pip
            pip3 install Jinja2
            pip3 install PyOpenGL
            pip3 install pyside6==6.5.1.1 --ignore-installed

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Vulkan SDK
      - name: Install Vulkan SDK (and DXC shader compiler)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: build_scripts/runner/windows
        env:
          VULKAN_SDK: "C:/VulkanSDK/1.3.296.0"
        run: |
            wget -q https://sdk.lunarg.com/sdk/download/1.3.296.0/windows/VulkanSDK-1.3.296.0-Installer.exe
            .\VulkanSDK-1.3.296.0-Installer.exe --accept-licenses --default-answer --confirm-command install
            Add-Content $env:GITHUB_PATH "C:\VulkanSDK\1.3.296.0\"
            Add-Content $env:GITHUB_PATH "C:\VulkanSDK\1.3.296.0\bin\"

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # CMake build and install
      - name: Install CMake
        if: runner.os == 'Linux'
        shell: bash
        working-directory: build_scripts/runner/linux
        run: |
            sudo dpkg -r --force-depends "cmake"
            sudo chmod +x cmake-3.31.0-g3d84ef8-Linux-x86_64.sh
            sudo ./cmake-3.31.0-g3d84ef8-Linux-x86_64.sh --skip-license --prefix=/usr/local

      - name: Install CMake
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: build_scripts/runner/windows
        run: |
            Expand-Archive -Force -Path cmake-3.31.0-gfcff461-win32-x86.zip -DestinationPath "C:\Program Files\CMake"

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Iconv
      - name: Install libiconv (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: teikitu_external
        run: |
            mkdir iconv
            wget -q https://github.com/pffang/libiconv-for-Windows/releases/download/1.18-eed6782/libiconv-for-Windows_prebuilt.zip
            Expand-Archive -Path libiconv-for-Windows_prebuilt.zip
            Remove-Item libiconv-for-Windows_prebuilt.zip

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Build: Teikitu
      - name: Environment Validation and Build
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        working-directory: build_scripts
        run: |
          echo "Repository: ${{ github.repository }}"
          cmake --version
          clang --version
          git config --global user.email "github.very069@passmail.net"
          git config --global user.name "Andrew Aye"
          gh auth login
          $env:GIT_SSH
          $env:VULKAN_SDK
          $env:Path
          ./cmake_command.ps1 ${{ inputs.cmake_command }}
